name: Netlify Deployments

on:
  workflow_call:
    inputs:
      changed:
        description: "The services/apps that changed (JSON array stringified)"
        type: string
        required: true    
      target-env:
        description: "The target environment (staging/production)"
        type: string
        required: true    
      is_forked:
        description: "That PR is a fork (or not)"
        type: string
        default: "false"

jobs:
  deploy-netlify:
    name: Deploy ${{ matrix.target }} on Netlify ${{ inputs.target_env }}
    runs-on: ubuntu-latest
    if: ${{ inputs.changed != '[]' }}
    env:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    strategy:
      matrix:
        service: ${{fromJson( inputs.changed )}}
    steps:
      - uses: actions/checkout@v2
      - name: Cache docker
        uses: actions/cache@v2
        if: github.event_name != 'schedule'
        env:
          cache-name: docker-cache-${{ matrix.target }}
        with:
          path: ${{ runner.temp }}/docker_cache
          key: ${{ env.cache-name }}-${{ github.run_number }}
          restore-keys: |
            ${{ env.cache-name }}-
      - name: Restore docker
        run: .github/actions/docker-cache/restore.sh ${{ runner.temp }}/docker_cache/cache.tar
      - name: "Export secrets to env"
        id: filter_secrets
        run: | 
          SERVICE_NAME="${{ matrix.service }}"
          UPCASE_SERVICE="${SERVICE_NAME^^}"
          PREFIX="${UPCASE_SERVICE//-/_}_NETLIFY_${{ inputs.target_env }}"
          bash .github/actions/secrets_to_env.sh '${{ toJson(secrets) }}' ${PREFIX^^}
      - name: Deploy to Netlify
        run: |
          # show args
          echo "${{ inputs.target_env }} ${{ matrix.service }} netlify $GITHUB_SHA $GITHUB_REF_NAME ${{ inputs.is_forked  }}"
          # run command
          scripts/deploy.sh ${{ inputs.target_env }} ${{ matrix.service }} netlify "$GITHUB_SHA" "$GITHUB_REF_NAME" ${{ inputs.is_forked  }}
      - name: Backup docker
        run: .github/actions/docker-cache/backup.sh ${{ runner.temp }}/docker_cache/cache.tar
