on: [pull_request]

name: Unlock Test Suite
jobs:
  monorepo-changes:
    runs-on: ubuntu-latest
    name: 'Check for changes in monorepo'
    outputs:
      changed: ${{ steps.check-changes.outputs.changed }}
    env:
      TARGETS: '[
        "locksmith",
        "packages/unlock-js",
        "packages/paywall",
        "packages/contracts",
        "smart-contracts",
        "smart-contract-extensions",
        "unlock-protocol-com",
        "wedlocks",
        "unlock-app"
        ]'
      FORCE_ALL_TESTS: ${{ contains(github.event.pull_request.labels.*.name, 'run-all-tests')}}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Check which folders should run tests'
        run: |
          if [ "${FORCE_ALL_TESTS}" == "true" ]; then
            echo 'Run all tests'
            echo ::set-output name=changed::$TARGETS
          else 
            changed=$(.github/actions/monorepo/check-changes.sh ${{ github.ref_name }})
            echo ::set-output name=changed::$changed
          fi
          printf 'changed:%s\n' "${changed[@]}"
        shell: bash
        id: check-changes

  unit-tests:
    needs: monorepo-changes
    name: Tests ${{ matrix.target }}
    runs-on: ubuntu-latest
    if: ${{ needs.monorepo-changes.outputs.changed != '[]' }}
    env:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      BLOCKTIME: 0
      # below env vars are just used by locksmith
      DB_USERNAME: locksmith_test
      DB_PASSWORD: password
      DB_NAME: locksmith_test
      DB_HOSTNAME: db
    strategy:
      matrix:
        target: ${{fromJson( needs.monorepo-changes.outputs.changed )}}
    steps:
      - uses: actions/checkout@v2
      - name: Cache docker
        uses: actions/cache@v2
        if: github.event_name != 'schedule'
        env:
          cache-name: docker-cache-${{ matrix.target }}
        with:
          path: ${{ runner.temp }}/docker_cache
          key: ${{ env.cache-name }}-${{ github.run_number }}
          restore-keys: |
            ${{ env.cache-name }}-
      - name: Restore docker
        run: .github/actions/docker-cache/restore.sh ${{ runner.temp }}/docker_cache/cache.tar
      - name: Running ${{ matrix.target }} tests
        run: ./scripts/tests.sh ${{ matrix.target }}
        shell: bash
      - name: Backup docker
        run: .github/actions/docker-cache/backup.sh ${{ runner.temp }}/docker_cache/cache.tar

  integration-tests:
    name: Integration Tests
    needs: unit-tests
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - uses: actions/checkout@v2
      - name: Run Integration Tests
        run: scripts/integration-tests.sh
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: /tmp/screenshots
      - name: Log failing tests
        if: ${{ failure() }}
        run: ./scripts/docker-compose-log.sh
