name: Netlify Deployments

on:
  pull_request:
  workflow_run:
    workflows: ["Unlock Test Suite"]
    types:
      - completed
    branches:
      - master
      - production

jobs:
  check_changes:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    name: 'Check for changes in monorepo'
    outputs:
      changed: ${{ steps.check-changes.outputs.changed }}
      target_env: ${{ steps.set_target.outputs.target }}
      is_forked: ${{ steps.is_forked.outputs.is_forked }}
    env:
      TARGETS: '[
        "unlock-protocol-com",
        "paywall-app",
        "wedlocks",
        "unlock-app"
        ]'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Set GIT_BRANCH in env'
        if: github.event_name != 'pull_request'
        id: branch_name
        run: |
          # Short name for current branch. For PRs, use target branch (base ref)
          GIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
      - name: 'Check which folders should run tests'
        run: |
          if [ "${GIT_BRANCH}" == "production" ]; then
            echo 'Deploy all'
            echo ::set-output name=changed::$TARGETS
          else 
            changed=$(.github/actions/monorepo/check-changes.sh ${{ github.ref_name }})
            echo ::set-output name=changed::$changed
          fi
          printf 'changed:%s\n' "${changed[@]}"
        shell: bash
        id: check-changes
      - name: Check if forked PR
        id: is_forked
        run: |
          echo "::set-output name=is_forked::${{github.repository_owner != 'Unlock Protocol' && github.event.pull_request.merged == true}}"
      - name: Set target environment
        id: set_target
        run: |
          echo "::set-output name=target::${{ contains(github.base_ref, 'production') && 'prod' || 'staging' }}"
  
  deploy-netlify:
    needs: check_changes
    name: Deploy ${{ matrix.target }} on Netlify ${{ needs.check_changes.outputs.target_env }}
    runs-on: ubuntu-latest
    if: ${{ needs.check_changes.outputs.changed != '[]' }} && ${{ needs.check_changes.outputs.is_forked == false }}
    env:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    strategy:
      matrix:
        service: ${{fromJson( needs.check_changes.outputs.changed )}}
    steps:
      - uses: actions/checkout@v2
      - name: Cache docker
        uses: actions/cache@v2
        if: github.event_name != 'schedule'
        env:
          cache-name: docker-cache-${{ matrix.target }}
        with:
          path: ${{ runner.temp }}/docker_cache
          key: ${{ env.cache-name }}-${{ github.run_number }}
          restore-keys: |
            ${{ env.cache-name }}-
      - name: Restore docker
        run: .github/actions/docker-cache/restore.sh ${{ runner.temp }}/docker_cache/cache.tar
      - name: Parse secrets prefix
        id: set_prefix
        run: |
          SERVICE_NAME="${{ matrix.service }}"
          UPCASE_SERVICE="${SERVICE_NAME^^}"
          PREFIX="${UPCASE_SERVICE//-/_}_NETLIFY_${{ needs.check_changes.outputs.target_env }}"
          echo "::set-output name=site_id::${PREFIX^^}_SITE_ID"
          echo "::set-output name=auth_token::${PREFIX^^}_AUTH_TOKEN"
          echo "::set-output name=test_secret::HELLO"
      - name: Export secrets to env
        run: |
          echo "${{ steps.set_prefix.outputs.site_id }}=$SITE_ID" >> $GITHUB_ENV
          echo "${{ steps.set_prefix.outputs.auth_token }}=$AUTH_TOKEN" >> $GITHUB_ENV
        env:
          SITE_ID: ${{ secrets[ steps.set_prefix.outputs.site_id ] }}
          AUTH_TOKEN: ${{ secrets[ steps.set_prefix.outputs.auth_token ] }}
      - name: Deploy to Netlify
        run: |
          # show args
          echo "${{ needs.check_changes.outputs.target_env }} ${{ matrix.service }} netlify $GITHUB_SHA $GITHUB_REF_NAME ${{ needs.check_changes.outputs.is_forked  }}"
          # run command
          scripts/deploy.sh ${{ needs.check_changes.outputs.target_env }} ${{ matrix.service }} netlify "$GITHUB_SHA" "$GITHUB_REF_NAME" ${{ needs.check_changes.outputs.is_forked  }}
      - name: Backup docker
        run: .github/actions/docker-cache/backup.sh ${{ runner.temp }}/docker_cache/cache.tar
