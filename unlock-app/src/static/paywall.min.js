!(function(e, t) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = t())
    : 'function' == typeof define && define.amd
      ? define(t)
      : (((e = e || self).paywall = e.paywall || {}), (e.paywall.js = t()))
})(this, function() {
  'use strict'
  var c = [
    'display:none',
    'position:fixed',
    'top:0',
    'left:0',
    'width:100%',
    'height:100vh',
    'border:0px',
    'background: linear-gradient(rgba(255,255,255,0) 18%, rgba(255,255,255,0) 29%, rgb(255,255,255) 48%)',
    'z-index: -2147483647',
  ]
  var s = 'http://localhost:3000'
  function t(e, t, n) {
    var a = !1
    if (
      (a ||
        (a = (function(e) {
          for (
            var t = e.getElementsByTagName('script'),
              n = /static\/paywall/i,
              a = 0;
            a < t.length;
            a++
          ) {
            var r = t[a].getAttribute('src')
            if (n.test(r)) {
              var o = t[a].getAttribute('data-unlock-url')
              return o || r.substring(0, r.indexOf('/static/paywall'))
            }
          }
          return s
        })(t)),
      n)
    ) {
      var r,
        o,
        i = ((r = a += '/paywall/'.concat(n, '/')),
        (o = t.createElement('iframe')).setAttribute('style', c.join('; ')),
        o.setAttribute('src', r),
        o.setAttribute('data-unlock', 'yes'),
        o)
      if (i) {
        var l, d
        ;(d = i),
        !(l = t).querySelector('iframe[data-unlock]') && l.body.appendChild(d)
        var u = !1
        e.addEventListener(
          'message',
          function(e) {
            var t, n
            'locked' !== e.data ||
              u ||
              ((u = !0),
              ((t = i).style.display = 'block'),
              (t.style['z-index'] = '2147483647')),
            'unlocked' === e.data &&
                ((u = !1),
                ((n = i).style.backgroundColor = 'transparent'),
                (n.style.backgroundImage = 'none'))
          },
          !1
        )
      }
    }
  }
  return (
    (function(e, t) {
      var n,
        a =
          (n = t.querySelector('meta[name=lock]')) && n.getAttribute('content')
      if (a) return e(a)
      new MutationObserver(
        function(l, e) {
          e.forEach(function(e) {
            if (e.addedNodes.length && e.addedNodes.length) {
              var t = !0,
                n = !1,
                a = void 0
              try {
                for (
                  var r, o = e.addedNodes.entries()[Symbol.iterator]();
                  !(t = (r = o.next()).done);
                  t = !0
                ) {
                  var i = r.value[1]
                  'META' === i.nodeName && 'lock' === i.name && l(i.content)
                }
              } catch (e) {
                ;(n = !0), (a = e)
              } finally {
                try {
                  t || null == o.return || o.return()
                } finally {
                  if (n) throw a
                }
              }
            }
          })
        }.bind(null, e)
      ).observe(t, { childList: !0, attributes: !0 })
    })(function(e) {
      t(window, document, e)
    }, document.head),
    t
  )
})
