version: 2
cached-checkout: &cached-checkout
  attach_workspace:
    at: '..'
images-caches: &images-caches
  attach_workspace:
    at: ../caches

jobs:
  checkout-and-cache:
    machine: true
    steps:
      - checkout
      - persist_to_workspace:
          root: '..'
          paths:
            - project

  promote:
    machine: true
    steps:
      - checkout
      - run:
          name: 'Open automated production pull request'
          command: scripts/open-production-pull-request.sh

  build-unlock:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - run: mkdir -p ../caches
      - *cached-checkout
      - run:
          name: Build Unlock Image
          command: scripts/build-image.sh unlock
      - run:
          name: Cache image locally
          command: docker save -o "../caches/unlock.tar" unlock
      - persist_to_workspace:
          root: '../caches'
          paths:
            - 'unlock.tar'

  build-unlock-integration:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - run: mkdir -p ../caches
      - *cached-checkout
      - run:
          name: Build Unlock Integration Image
          command: scripts/build-image.sh unlock-integration
      - run:
          name: Cache image locally
          command: docker save -o "../caches/unlock-integration.tar" unlock-integration
      - persist_to_workspace:
          root: '../caches'
          paths:
            - 'unlock-integration.tar'

  unlock-protocol-com-tests:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Load Unlock Image
          command: docker load -i  "../caches/unlock.tar"
      - run:
          name: Creator Dashboard tests
          command: scripts/tests.sh unlock-protocol-com

  unlock-app-tests:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Load Unlock Image
          command: docker load -i  "../caches/unlock.tar"
      - run:
          name: Creator Dashboard tests
          command: scripts/tests.sh unlock-app

  unlock-app-chromatic:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Load Unlock Image
          command: docker load -i  "../caches/unlock.tar"
      - run:
          name: Creator Dashboard stories
          command: scripts/storybook.sh unlock-app "$CIRCLE_BRANCH"
          environment:
            UNLOCK_APP_CHROMATIC_APP_CODE: swpc6wf70qp

  smart-contracts-tests:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Load Unlock Image
          command: docker load -i  "../caches/unlock.tar"
      - run:
          name: Smart Contract Tests
          command: scripts/tests.sh smart-contracts

  locksmith-tests:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
      DB_USERNAME: locksmith_test
      DB_PASSWORD: password
      DB_NAME: locksmith_test
      DB_HOSTNAME: db
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Load Unlock Image
          command: docker load -i  "../caches/unlock.tar"
      - run:
          name: Locksmith Tests
          command: scripts/tests.sh locksmith

  paywall-tests:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Load Unlock Image
          command: docker load -i  "../caches/unlock.tar"
      - run:
          name: Paywall Tests
          command: scripts/tests.sh paywall

  wedlocks-tests:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Load Unlock Image
          command: docker load -i  "../caches/unlock.tar"
      - run:
          name: Wedlocks Tests
          command: scripts/tests.sh wedlocks

  integration-tests:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Load Unlock Image
          command: docker load -i  "../caches/unlock.tar"
      - run:
          name: Load Unlock Integration Image
          command: docker load -i "../caches/unlock-integration.tar"
      - run:
          name: Integration Tests
          command: scripts/integration-tests.sh
      - store_artifacts:
          path: /tmp/screenshots
      - run:
          name: Log failing tests
          command: ./scripts/docker-compose-log.sh
          when: on_fail

  deploy-unlock-app-netlify:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Set ENV_TARGET
          command: scripts/circleci/set-env-target.sh >> $BASH_ENV
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Load Unlock Image
          command: docker load -i  "../caches/unlock.tar"
      - run:
          name: Deploy to Netlify
          command: scripts/deploy.sh "$ENV_TARGET" unlock-app netlify "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  deploy-unlock-protocol-com-netlify:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Set ENV_TARGET
          command: scripts/circleci/set-env-target.sh >> $BASH_ENV
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Load Unlock Image
          command: docker load -i  "../caches/unlock.tar"
      - run:
          name: Deploy to Netlify
          command: scripts/deploy.sh "$ENV_TARGET" unlock-protocol-com netlify "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  deploy-paywall-netlify:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Set ENV_TARGET
          command: scripts/circleci/set-env-target.sh >> $BASH_ENV
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Load Unlock Image
          command: docker load -i "../caches/unlock.tar"
      - run:
          name: Deploy to Netlify
          command: scripts/deploy.sh "$ENV_TARGET" paywall netlify "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  deploy-wedlocks-netlify:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Load Unlock Image
          command: docker load -i "../caches/unlock.tar"
      - run:
          name: Deploy to Netlify
          command: scripts/deploy.sh "$ENV_TARGET" wedlocks netlify "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  deploy-locksmith-beanstalk:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *cached-checkout
      - run:
          name: Set IS_FORKED_PR
          command: ./scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Installing deployment dependencies
          working_directory: /
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install python-pip python-dev build-essential
            sudo pip install --upgrade setuptools
            sudo pip install awsebcli --upgrade
      - run:
          name: Set GIT_COMMIT_DESC
          command: echo 'export GIT_COMMIT_DESC=$(git log --format=%B -n 1 "$CIRCLE_SHA1")' >> $BASH_ENV
      - run:
          name: Deploy to to Beanstalk
          command: locksmith/scripts/deploy-elasticbeanstalk-docker.sh "$APPLICATION" "$ENVIRONMENT" "$DB_USERNAME" "$DB_PASSWORD" "$DB_NAME" "$DB_HOSTNAME" "$NODE_ENV" "$IS_FORKED_PR" "$CIRCLE_SHA1" "$GIT_COMMIT_DESC"

  promote-unlock-image:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Load Unlock Image
          command: docker load -i  "../caches/unlock.tar"
      - run:
          name: Push Unlock Image as master
          command: scripts/push-image.sh unlock master

  promote-unlock-integration-image:
    machine: true
    environment:
      DOCKER_REPOSITORY: unlockprotocol
    steps:
      - *images-caches
      - *cached-checkout
      - run:
          name: Load Unlock Integration Image
          command: docker load -i  "../caches/unlock-integration.tar"
      - run:
          name: Push Unlock Integration Image as master
          command: scripts/push-image.sh unlock-integration master

workflows:
  version: 2
  promote: # The promote workflow will checkout an old version of master (4 days old) and rebase it onto the production branch
    triggers:
      - schedule:
          cron: '30 20 * * 2' # use cron syntax to set the schedule trigger on Teusday at 430pm ET (2030 UTC)
          filters:
            branches:
              only:
                - master
    jobs:
      - promote

  build-test-and-deploy:
    jobs:
      - checkout-and-cache
      - build-unlock:
          requires:
            - checkout-and-cache
      - build-unlock-integration:
          requires:
            - checkout-and-cache
      - unlock-protocol-com-tests:
          requires:
            - build-unlock
      - unlock-app-tests:
          requires:
            - build-unlock
      - unlock-app-chromatic:
          requires:
            - build-unlock
      - smart-contracts-tests:
          requires:
            - build-unlock
      - locksmith-tests:
          requires:
            - build-unlock
      - paywall-tests:
          requires:
            - build-unlock
      - wedlocks-tests:
          requires:
            - build-unlock
      - integration-tests:
          requires:
            - build-unlock
            - build-unlock-integration
      - deploy-unlock-app-netlify:
          requires:
            - unlock-app-tests
            - integration-tests
      - deploy-paywall-netlify:
          requires:
            - paywall-tests
            - integration-tests
      - deploy-unlock-protocol-com-netlify:
          requires:
            - unlock-protocol-com-tests
            - integration-tests
      - promote-unlock-image:
          filters:
            branches:
              only: master
          requires:
            - unlock-protocol-com-tests
            - unlock-app-tests
            - smart-contracts-tests
            - locksmith-tests
            - paywall-tests
            - wedlocks-tests
            - integration-tests
      - promote-unlock-integration-image:
          filters:
            branches:
              only: master
          requires:
            - unlock-protocol-com-tests
            - unlock-app-tests
            - smart-contracts-tests
            - locksmith-tests
            - paywall-tests
            - wedlocks-tests
            - integration-tests
      - deploy-locksmith-beanstalk:
          filters:
            branches:
              only: master
          requires:
            - unlock-protocol-com-tests
            - unlock-app-tests
            - smart-contracts-tests
            - locksmith-tests
            - paywall-tests
            - wedlocks-tests
            - integration-tests
      - deploy-wedlocks-netlify:
          filters:
            branches:
              only: master
          requires:
            - unlock-protocol-com-tests
            - unlock-app-tests
            - smart-contracts-tests
            - locksmith-tests
            - paywall-tests
            - wedlocks-tests
            - integration-tests
