version: 2.1

executors:
  ubuntu_20-executor:
    machine:
      image: 'ubuntu-2004:202104-01'
      docker_layer_caching: true

jobs:
  run-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      BLOCKTIME: 0
    parameters:
      service:
        description: "The sub-repository where the application should be tested"
        type: string
    steps:
      - checkout
      - run:
          name: Check for changes in repository
          command: scripts/monorepo.sh << parameters.service >> $CIRCLE_BRANCH
      - run:
          name: Running << parameters.service >> tests
          command: scripts/tests.sh << parameters.service >>

  locksmith-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      DB_USERNAME: locksmith_test
      DB_PASSWORD: password
      DB_NAME: locksmith_test
      DB_HOSTNAME: db
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh locksmith $CIRCLE_BRANCH
      - run:
          name: Locksmith Tests
          command: scripts/tests.sh locksmith

  integration-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          name: Integration Tests
          command: scripts/integration-tests.sh
      - store_artifacts:
          path: /tmp/screenshots
      - run:
          name: Log failing tests
          command: ./scripts/docker-compose-log.sh
          when: on_fail

  deploy-to-netlify:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    parameters:
      service:
        description: "The service/sub-repository to deploy"
        type: string
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh << parameters.service >> $CIRCLE_BRANCH
      - run:
          name: Set ENV_TARGET
          command: scripts/circleci/set-env-target.sh << parameters.service >> >> $BASH_ENV
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Deploy to Netlify
          command: scripts/deploy.sh "$ENV_TARGET" << parameters.service >> netlify "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  deploy-paywall-aws:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh paywall $CIRCLE_BRANCH
      - run:
          name: Set ENV_TARGET
          command: scripts/circleci/set-env-target.sh >> $BASH_ENV
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Deploy to AWS
          command: scripts/deploy-aws.sh "$ENV_TARGET" paywall "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  deploy-locksmith-beanstalk:
    docker:
      - image: circleci/python:3.9.7
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh locksmith $CIRCLE_BRANCH
      - run:
          name: Set IS_FORKED_PR
          command: ./scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Set ENV_TARGET
          command: scripts/circleci/set-env-target.sh >> $BASH_ENV
      - run:
          name: Installing deployment dependencies
          working_directory: /
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install python3-pip python3-dev build-essential
            sudo pip install --upgrade setuptools
            sudo pip install awsebcli --upgrade
      - run:
          name: Set GIT_COMMIT_DESC
          command: echo 'export GIT_COMMIT_DESC=$(git log --format=%B -n 1 "$CIRCLE_SHA1")' >> $BASH_ENV
      - run:
          name: Deploy Locksmith to Beanstalk
          command: locksmith/scripts/deploy-elasticbeanstalk-docker.sh

  build-and-deploy-to-heroku:
    executor: ubuntu_20-executor
    environment:
      DOCKER_REPOSITORY: unlockprotocol
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    parameters:
      service:
        description: "The service/app to build"
        type: string
      app-name:
        description: "The Heroku app name to which the application should be deployed"
        type: string
    steps:
      - checkout
    # - run:
    #       command: scripts/monorepo.sh locksmith $CIRCLE_BRANCH
      - run:
          name: Show docker info
          command: |
            docker info
      - run:
          name: Build container & deploy to heroku
          command: |
            sh ./scripts/heroku.sh << parameters.service >> << parameters.app-name >>

  open-prod-pull-request:
    executor: ubuntu_20-executor
    steps:
      - checkout
      - run:
          name: 'Open automated production pull request'
          command: scripts/automated-production-pr.sh

workflows:
  version: 2

  build-test-and-deploy:
    jobs:
      - locksmith-tests
      - run-tests:
          name: "unlock-js-tests"
          service: packages/unlock-js
      - run-tests:
          name: "paywall-lib-tests"
          service: packages/paywall
      - run-tests:
          name: "newsletter-tests"
          service: newsletter
      - run-tests:
          name: "smart-contracts-tests"
          service: smart-contracts
      - run-tests:
          name: "smart-contracts-extensions-tests"
          service: smart-contract-extensions
      - run-tests:
          name: "unlock-protocol-com-tests"
          service: unlock-protocol-com
      - run-tests:
          name: "wedlocks-tests"
          service: wedlocks
      - run-tests:
          name: "unlock-app-tests"
          service: unlock-app
      - integration-tests:
          requires:
            - unlock-protocol-com-tests
            - unlock-app-tests
            - locksmith-tests
            - paywall-lib-tests
            - wedlocks-tests
            - newsletter-tests
      - build-and-deploy-to-heroku:
          name: "deploy-locksmith-staging"
          service: locksmith
          app-name: unlock-locksmith-staging
          requires:
            - integration-tests
          filters:
            branches:
              only: master 
      - build-and-deploy-to-heroku:
          name: "deploy-locksmith-production"
          service: locksmith
          app-name: unlock-locksmith-production
          requires:
            - integration-tests
          filters:
            branches:
              only: production # deploy in production
      -  deploy-to-netlify:
          name: "deploy-unlock-app-netlify"
          service: "unlock-app"
          requires:
            - integration-tests
      - deploy-to-netlify:
          name: "deploy-paywall-netlify"
          service: paywall-app
          requires:
            - integration-tests
      - deploy-paywall-aws:
          requires:
            - integration-tests
      - deploy-to-netlify:
          name: "deploy-newsletter-netlify"
          service: "newsletter"
          requires:
            - integration-tests
      - deploy-to-netlify:
          name: "deploy-unlock-protocol-com-netlify"
          service: "unlock-protocol-com"
          requires:
            - integration-tests
      - deploy-to-netlify:
          service: "wedlocks"
          name:
            "deploy-wedlocks-netlify"
          filters:
            branches:
              only: master
          requires:
            - integration-tests

  prepare-prod-deploy:
    triggers:
      - schedule:
          cron: '30 12 * * 2' # use cron syntax to set the scheduled trigger
          filters:
            branches:
              only:
                - master
    jobs:
      - open-prod-pull-request