version: 2.1

executors:
  ubuntu_20-executor:
    machine:
      image: 'ubuntu-2004:202104-01'
      docker_layer_caching: true

jobs:
  run-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      BLOCKTIME: 0
    parameters:
      service:
        description: 'The sub-repository where the application should be tested'
        type: string
    steps:
      - checkout
      - run:
          name: Check for changes in repository
          command: |
            changed=$(scripts/monorepo.sh << parameters.service >> $CIRCLE_BRANCH)
            if [ "$changed" != "changed" ] && [ $CIRCLE_BRANCH != "master" ] && [ $CIRCLE_BRANCH != "production" ]; then circleci step halt; fi
      - run:
          name: Running << parameters.service >> tests
          command: scripts/tests.sh << parameters.service >>

  locksmith-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      DB_USERNAME: locksmith_test
      DB_PASSWORD: password
      DB_NAME: locksmith_test
      DB_HOSTNAME: db
    steps:
      - checkout
      - run:
          command: |
            changed=$(scripts/monorepo.sh locksmith $CIRCLE_BRANCH)
            if [ "$changed" != "changed" ] && [ $CIRCLE_BRANCH != "master" ] && [ $CIRCLE_BRANCH != "production" ]; then
              circleci step halt;
            fi
      - run:
          name: Locksmith Tests
          command: scripts/tests.sh locksmith

  integration-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          name: Integration Tests
          command: scripts/integration-tests.sh
      - store_artifacts:
          path: /tmp/screenshots
      - run:
          name: Log failing tests
          command: ./scripts/docker-compose-log.sh
          when: on_fail

  deploy-to-netlify:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    parameters:
      service:
        description: 'The service/sub-repository to deploy'
        type: string
    steps:
      - checkout
      - run:
          name: Set ENV_TARGET
          command: scripts/circleci/set-env-target.sh << parameters.service >> >> $BASH_ENV
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Deploy to Netlify
          command: scripts/deploy.sh "$ENV_TARGET" << parameters.service >> netlify "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  build-and-deploy-to-heroku:
    executor: ubuntu_20-executor
    environment:
      DOCKER_REPOSITORY: unlockprotocol
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    parameters:
      service:
        description: 'The service/app to build'
        type: string
      app-name:
        description: 'The Heroku app name to which the application should be deployed'
        type: string
      container-type:
        description: "The Heroku container type to use such as worker or web."
        type: string
        default: web
      build-dir:
        description: 'The build directory to use. By default, it will use name of the service as build directory'
        type: string
        default: ""
      command:
        description: "The command to start the container with"
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: Show docker info
          command: |
            docker info
      - run:
          name: Build container & deploy to heroku
          command: |
            sh ./scripts/heroku.sh << parameters.service >> << parameters.app-name >> << parameters.container-type >> "<< parameters.command >>" << parameters.build-dir >>

  open-prod-pull-request:
    executor: ubuntu_20-executor
    steps:
      - checkout
      - run:
          name: 'Open automated production pull request'
          command: scripts/automated-production-pr.sh

workflows:
  version: 2

  build-test-and-deploy:
    jobs:
      - locksmith-tests
      - run-tests:
          name: 'unlock-js-tests'
          service: packages/unlock-js
      - run-tests:
          name: 'paywall-lib-tests'
          service: packages/paywall
      - run-tests:
          name: 'smart-contracts-tests'
          service: smart-contracts
      - run-tests:
          name: 'smart-contracts-extensions-tests'
          service: smart-contract-extensions
      - run-tests:
          name: 'unlock-protocol-com-tests'
          service: unlock-protocol-com
      - run-tests:
          name: 'wedlocks-tests'
          service: wedlocks
      - run-tests:
          name: 'unlock-app-tests'
          service: unlock-app
      - integration-tests:
          requires:
            - unlock-protocol-com-tests
            - unlock-app-tests
            - locksmith-tests
            - paywall-lib-tests
            - wedlocks-tests
      - build-and-deploy-to-heroku:
          name: 'deploy-locksmith-staging'
          service: locksmith
          app-name: unlock-locksmith-staging
          requires:
            - integration-tests
          filters:
            branches:
              only: master
      - build-and-deploy-to-heroku:
          name: 'deploy-locksmith-production'
          service: locksmith
          app-name: unlock-locksmith-production
          requires:
            - integration-tests
          filters:
            branches:
              only: production # deploy in production
      - build-and-deploy-to-heroku:
          name: 'deploy-locksmith-websub-staging'
          service: locksmith-websub
          build-dir: locksmith
          command: "yarn websub:prod"
          app-name: locksmith-websub-staging
          container-type: worker
          requires:
            - integration-tests
          filters:
            branches:
              only: master
      - build-and-deploy-to-heroku:
          name: 'deploy-locksmith-websub-production'
          service: locksmith-websub
          build-dir: locksmith
          command: "yarn websub:prod"
          app-name: locksmith-websub-production
          container-type: worker
          requires:
            - integration-tests
          filters:
            branches:
              only: production # deploy in production
      - deploy-to-netlify:
          name: 'deploy-unlock-app-netlify'
          service: 'unlock-app'
          requires:
            - integration-tests
      - deploy-to-netlify:
          name: 'deploy-paywall-netlify'
          service: paywall-app
          requires:
            - integration-tests
      - deploy-to-netlify:
          name: 'deploy-unlock-protocol-com-netlify'
          service: 'unlock-protocol-com'
          requires:
            - integration-tests
      - deploy-to-netlify:
          service: 'wedlocks'
          name: 'deploy-wedlocks-netlify'
          filters:
            branches:
              only: master
          requires:
            - integration-tests

  prepare-prod-deploy:
    triggers:
      - schedule:
          cron: '30 12 * * 2' # use cron syntax to set the scheduled trigger
          filters:
            branches:
              only:
                - master
    jobs:
      - open-prod-pull-request
