{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xA2D9BC1ffc560Cc6F21aC09E317A3186AC1B1db8"
  },
  "proxies": [
    {
      "address": "0x3d5409cce1d45233de1d4ebdee74b8e004abdd13",
      "kind": "transparent"
    },
    {
      "address": "0x90DE74265a416e1393A450752175AED98fe11517",
      "kind": "transparent"
    },
    {
      "address": "0x9A1f43090307034DBFBE2ba20320Ce815ff046D4",
      "txHash": "0x666e0cd6acc44c8da39964d5e9d4a1e0cdd0ff3140466bdcbeacdc04630d6ac8",
      "kind": "transparent"
    },
    {
      "address": "0xe79B93f8E22676774F2A8dAd469175ebd00029FA",
      "txHash": "0xeac96a22f8d266c3eafeb9f18c3463458536cf0bd10c6075d4194a4f55adf307",
      "kind": "transparent"
    },
    {
      "address": "0x440d9D4E66d39bb28FB58729Cb4D3ead2A595591",
      "txHash": "0x19707e4f1839f349e616d858bdb7e9373b76b6a27364c3d0bbd60c4b5b3af63a",
      "kind": "transparent"
    }
  ],
  "impls": {
    "1c787d15bfcc8f151c3ca1db0d4a919f7d282e76566f669fa0d4f1098b1e8a36": {
      "address": "0x5ACe3dc6d531d71c693A56510cC7491f48b1c4E4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol"
          },
          {
            "contract": "Ownable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol"
          },
          {
            "contract": "Ownable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol"
          },
          {
            "contract": "Unlock",
            "label": "grossNetworkProduct",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "totalDiscountGranted",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "locks",
            "type": "t_mapping(unknown,t_struct(LockBalances)4_storage)",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "globalBaseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "globalTokenSymbol",
            "type": "t_string_storage",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "publicLockAddress",
            "type": "t_address",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "uniswapOracles",
            "type": "t_mapping(t_address,t_contract(IUniswapOracle)7444)",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "weth",
            "type": "t_address",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "udt",
            "type": "t_address",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "estimatedGasForPurchase",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(LockBalances)4_storage": {
            "label": "LockBalances",
            "members": [
              {
                "label": "deployed",
                "type": "t_bool"
              },
              {
                "label": "totalSales",
                "type": "t_uint256"
              },
              {
                "label": "yieldedDiscountTokens",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(unknown,t_struct(LockBalances)4_storage)": {
            "label": "LockBalances)"
          },
          "t_string": {
            "label": "string"
          },
          "t_mapping(unknown,t_address)": {
            "label": "mapping(key => address)"
          }
        }
      }
    },
    "3b4ab364958e28492a91a277daaf61cb1cff2a34f93b92e94b238e22e3d18fdd": {
      "address": "0x433f12b9713B012D63D6e60ABf16D64B63BE207b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol"
          },
          {
            "contract": "ERC20",
            "label": "_balances",
            "type": "t_mapping(unknown,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol"
          },
          {
            "contract": "ERC20",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol"
          },
          {
            "contract": "ERC20",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol"
          },
          {
            "contract": "ERC20",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol"
          },
          {
            "contract": "MinterRole",
            "label": "_minters",
            "type": "t_struct(Role)4_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol"
          },
          {
            "contract": "MinterRole",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol"
          },
          {
            "contract": "ERC20Mintable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Mintable.sol"
          },
          {
            "contract": "ERC20Detailed",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol"
          },
          {
            "contract": "ERC20Detailed",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol"
          },
          {
            "contract": "ERC20Detailed",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol"
          },
          {
            "contract": "ERC20Detailed",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(unknown,t_uint256)": {
            "label": "mapping(key => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_struct(Role)4_storage": {
            "label": "Role",
            "members": [
              {
                "label": "bearer",
                "type": "t_mapping(unknown,t_bool)"
              }
            ]
          },
          "t_mapping(unknown,t_bool)": {
            "label": "mapping(key => bool)"
          },
          "t_string": {
            "label": "string"
          },
          "t_string_storage": {
            "label": "string_storage"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "0a735f100bcf67f21f25bffb161c6ad9c73bdee9f5831f4ea7b48114b0478c93": {
      "address": "0x5bEf305dDC84A2c7239353eF9CA19a5e9e1E8fDF",
      "txHash": "0x7770a181b75931d15047d31302c7c0d147e84a15dcc483f97141db11e66bc836",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:233"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:238"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:289"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/ERC20Patched.sol:325"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/ERC20Patched.sol:327"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/ERC20Patched.sol:329"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:650"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "_minters",
            "type": "t_struct(Role)7_storage",
            "src": "contracts/ERC20Patched.sol:1656"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1691"
          },
          {
            "contract": "ERC20MintableUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1730"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1695"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1696"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "contracts/ERC20Patched.sol:1697"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1717"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:821"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:822"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:903"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1169_storage)",
            "src": "contracts/ERC20Patched.sol:973"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:976"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/ERC20Patched.sol:1041"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_delegates",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/ERC20Patched.sol:1367"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_checkpoints",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1931_storage)dyn_storage)",
            "src": "contracts/ERC20Patched.sol:1368"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_totalSupplyCheckpoints",
            "type": "t_array(t_struct(Checkpoint)1931_storage)dyn_storage",
            "src": "contracts/ERC20Patched.sol:1369"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/ERC20Patched.sol:1590"
          },
          {
            "contract": "ERC20VotesCompUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1641"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)1931_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
          },
          "t_array(t_struct(Checkpoint)1931_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)1931_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32"
              },
              {
                "label": "votes",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_address,t_struct(Counter)1169_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1169_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(Role)7_storage": {
            "label": "struct Roles.Role",
            "members": [
              {
                "label": "bearer",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          }
        }
      }
    },
    "c1cd311ce43adf0c1fea96e686ac6080a5184b3a0c75b58858174621d66d7dd9": {
      "address": "0x9837f7330870506D6626B91aC027c658D81157B8",
      "txHash": "0xd667f576a10d21b292a0a51775279fea25941ba6f1b49c0b6bd7f3b07925a9f6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol:61"
          },
          {
            "contract": "Ownable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol:17"
          },
          {
            "contract": "Ownable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol:80"
          },
          {
            "contract": "Unlock",
            "label": "grossNetworkProduct",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:68"
          },
          {
            "contract": "Unlock",
            "label": "totalDiscountGranted",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:70"
          },
          {
            "contract": "Unlock",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(LockBalances)2318_storage)",
            "src": "contracts/Unlock.sol:73"
          },
          {
            "contract": "Unlock",
            "label": "globalBaseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/Unlock.sol:77"
          },
          {
            "contract": "Unlock",
            "label": "globalTokenSymbol",
            "type": "t_string_storage",
            "src": "contracts/Unlock.sol:81"
          },
          {
            "contract": "Unlock",
            "label": "publicLockAddress",
            "type": "t_address",
            "src": "contracts/Unlock.sol:84"
          },
          {
            "contract": "Unlock",
            "label": "uniswapOracles",
            "type": "t_mapping(t_address,t_contract(IUniswapOracle)7444)",
            "src": "contracts/Unlock.sol:88"
          },
          {
            "contract": "Unlock",
            "label": "weth",
            "type": "t_address",
            "src": "contracts/Unlock.sol:91"
          },
          {
            "contract": "Unlock",
            "label": "udt",
            "type": "t_address",
            "src": "contracts/Unlock.sol:94"
          },
          {
            "contract": "Unlock",
            "label": "estimatedGasForPurchase",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:97"
          },
          {
            "contract": "Unlock",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:100"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(LockBalances)2318_storage)": {
            "label": "mapping(address => struct Unlock.LockBalances)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(LockBalances)2318_storage": {
            "label": "struct Unlock.LockBalances",
            "members": [
              {
                "label": "deployed",
                "type": "t_bool"
              },
              {
                "label": "totalSales",
                "type": "t_uint256"
              },
              {
                "label": "yieldedDiscountTokens",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_contract(IUniswapOracle)7444)": {
            "label": "mapping(address => contract IUniswapOracle)"
          },
          "t_contract(IUniswapOracle)7444": {
            "label": "contract IUniswapOracle"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "23e8cc6f0f1ae1a772357f07e46040c6c4334b75897307db27f5c03a50e5d821": {
      "address": "0x9CffbA297d62Be40cB803EB200Cd476D963742cb",
      "txHash": "0x49e1260fa61c5d372d1a3fb14b1d6f3083cbe45b8f87db06e90c893d24ced797",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:233"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:238"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:289"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/ERC20Patched.sol:325"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/ERC20Patched.sol:327"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/ERC20Patched.sol:329"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:650"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "_minters",
            "type": "t_struct(Role)7_storage",
            "src": "contracts/ERC20Patched.sol:1656"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1691"
          },
          {
            "contract": "ERC20MintableUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1730"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1695"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1696"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "contracts/ERC20Patched.sol:1697"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1717"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:821"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:822"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:903"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1169_storage)",
            "src": "contracts/ERC20Patched.sol:973"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:976"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/ERC20Patched.sol:1041"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_delegates",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/ERC20Patched.sol:1367"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_checkpoints",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1931_storage)dyn_storage)",
            "src": "contracts/ERC20Patched.sol:1368"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_totalSupplyCheckpoints",
            "type": "t_array(t_struct(Checkpoint)1931_storage)dyn_storage",
            "src": "contracts/ERC20Patched.sol:1369"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/ERC20Patched.sol:1590"
          },
          {
            "contract": "ERC20VotesCompUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1641"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)1931_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
          },
          "t_array(t_struct(Checkpoint)1931_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)1931_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32"
              },
              {
                "label": "votes",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_address,t_struct(Counter)1169_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1169_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(Role)7_storage": {
            "label": "struct Roles.Role",
            "members": [
              {
                "label": "bearer",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          }
        }
      }
    },
    "7747a56cb5fbae626c485b00b3831ac17f5a3e93b019220e85448f1f8a758bd5": {
      "address": "0x3F27Ff20E4C53d5cd2BBA91eee90A2B71A876833",
      "txHash": "0xde361c276ffb4967d6bd09af38429d0c6c584c4436f82a0be0e595101e27dcc8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:234"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:239"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:290"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/ERC20Patched.sol:326"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/ERC20Patched.sol:328"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/ERC20Patched.sol:330"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:652"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "_minters",
            "type": "t_struct(Role)7_storage",
            "src": "contracts/ERC20Patched.sol:1678"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1713"
          },
          {
            "contract": "ERC20MintableUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1752"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1717"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1718"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "contracts/ERC20Patched.sol:1719"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1739"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:823"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:824"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:912"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1203_storage)",
            "src": "contracts/ERC20Patched.sol:982"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:985"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/ERC20Patched.sol:1055"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_delegates",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/ERC20Patched.sol:1389"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_checkpoints",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)",
            "src": "contracts/ERC20Patched.sol:1390"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_totalSupplyCheckpoints",
            "type": "t_array(t_struct(Checkpoint)2008_storage)dyn_storage",
            "src": "contracts/ERC20Patched.sol:1391"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/ERC20Patched.sol:1612"
          },
          {
            "contract": "ERC20VotesCompUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1663"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
          },
          "t_array(t_struct(Checkpoint)2008_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)2008_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32"
              },
              {
                "label": "votes",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_address,t_struct(Counter)1203_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1203_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(Role)7_storage": {
            "label": "struct Roles.Role",
            "members": [
              {
                "label": "bearer",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          }
        }
      }
    },
    "ff29041c6dd29f59e23b7732f6511869b9ca975fbb90c294a2eabe570ca3968b": {
      "address": "0xb0C7bF7E8cC54670b462c5f668D56c897c1604d6",
      "txHash": "0xd6499873c95461360d721d36b524a2e4805aae90a4019b8fae6bc381de23b4cd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:234"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:239"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:290"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/ERC20Patched.sol:326"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/ERC20Patched.sol:328"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/ERC20Patched.sol:330"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:651"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "_minters",
            "type": "t_struct(Role)7_storage",
            "src": "contracts/ERC20Patched.sol:1677"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1712"
          },
          {
            "contract": "ERC20MintableUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1751"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1716"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1717"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "contracts/ERC20Patched.sol:1718"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1738"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:822"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:823"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:911"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1203_storage)",
            "src": "contracts/ERC20Patched.sol:981"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:984"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/ERC20Patched.sol:1054"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_delegates",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/ERC20Patched.sol:1388"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_checkpoints",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)",
            "src": "contracts/ERC20Patched.sol:1389"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_totalSupplyCheckpoints",
            "type": "t_array(t_struct(Checkpoint)2008_storage)dyn_storage",
            "src": "contracts/ERC20Patched.sol:1390"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/ERC20Patched.sol:1611"
          },
          {
            "contract": "ERC20VotesCompUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1662"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
          },
          "t_array(t_struct(Checkpoint)2008_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)2008_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32"
              },
              {
                "label": "votes",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_address,t_struct(Counter)1203_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1203_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(Role)7_storage": {
            "label": "struct Roles.Role",
            "members": [
              {
                "label": "bearer",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          }
        }
      }
    },
    "66f69b8418586f0677f959128ad5c436bc187e632d138b6544f2fd22fd11a5cc": {
      "address": "0xcB22BD8b943879e83193F479Ec4E3c98B610B507",
      "txHash": "0x61343ef4f8ac8100bade672329910e9c204e63f10073d0b3bd7638172d845912",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:234"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:239"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:290"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/ERC20Patched.sol:326"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/ERC20Patched.sol:328"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/ERC20Patched.sol:330"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:651"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "_minters",
            "type": "t_struct(Role)7_storage",
            "src": "contracts/ERC20Patched.sol:1677"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1712"
          },
          {
            "contract": "ERC20MintableUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1751"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1716"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1717"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "contracts/ERC20Patched.sol:1718"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1738"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:822"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:823"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:911"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1203_storage)",
            "src": "contracts/ERC20Patched.sol:981"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:984"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/ERC20Patched.sol:1054"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_delegates",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/ERC20Patched.sol:1388"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_checkpoints",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)",
            "src": "contracts/ERC20Patched.sol:1389"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_totalSupplyCheckpoints",
            "type": "t_array(t_struct(Checkpoint)2008_storage)dyn_storage",
            "src": "contracts/ERC20Patched.sol:1390"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/ERC20Patched.sol:1611"
          },
          {
            "contract": "ERC20VotesCompUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1662"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
          },
          "t_array(t_struct(Checkpoint)2008_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)2008_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32"
              },
              {
                "label": "votes",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_address,t_struct(Counter)1203_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1203_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(Role)7_storage": {
            "label": "struct Roles.Role",
            "members": [
              {
                "label": "bearer",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          }
        }
      }
    },
    "41cfeb95a8e6bb7cfbe1d457f8fb6b99648590ab4b46e098ceab867e8c509893": {
      "address": "0x646E373EAf8a4AEc31Bf62B7Fd6fB59296d6CdA9",
      "txHash": "0xb616e544788d8babeb565e5bdf2658d10e79bd8d036dca38b2036bd17433fa42",
      "layout": {
        "storage": [
          {
            "contract": "UnlockInitializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/UnlockInitializable.sol:39"
          },
          {
            "contract": "UnlockInitializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/UnlockInitializable.sol:44"
          },
          {
            "contract": "UnlockContextUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/UnlockContextUpgradeable.sol:31"
          },
          {
            "contract": "UnlockOwnable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/UnlockOwnable.sol:23"
          },
          {
            "contract": "UnlockOwnable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/UnlockOwnable.sol:86"
          },
          {
            "contract": "Unlock",
            "label": "grossNetworkProduct",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:63"
          },
          {
            "contract": "Unlock",
            "label": "totalDiscountGranted",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:65"
          },
          {
            "contract": "Unlock",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(LockBalances)1513_storage)",
            "src": "contracts/Unlock.sol:68"
          },
          {
            "contract": "Unlock",
            "label": "globalBaseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/Unlock.sol:72"
          },
          {
            "contract": "Unlock",
            "label": "globalTokenSymbol",
            "type": "t_string_storage",
            "src": "contracts/Unlock.sol:76"
          },
          {
            "contract": "Unlock",
            "label": "publicLockAddress",
            "type": "t_address",
            "src": "contracts/Unlock.sol:79"
          },
          {
            "contract": "Unlock",
            "label": "uniswapOracles",
            "type": "t_mapping(t_address,t_contract(IUniswapOracle)3350)",
            "src": "contracts/Unlock.sol:83"
          },
          {
            "contract": "Unlock",
            "label": "weth",
            "type": "t_address",
            "src": "contracts/Unlock.sol:86"
          },
          {
            "contract": "Unlock",
            "label": "udt",
            "type": "t_address",
            "src": "contracts/Unlock.sol:89"
          },
          {
            "contract": "Unlock",
            "label": "estimatedGasForPurchase",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:92"
          },
          {
            "contract": "Unlock",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:95"
          },
          {
            "contract": "Unlock",
            "label": "proxyAdminAddress",
            "type": "t_address",
            "src": "contracts/Unlock.sol:98"
          },
          {
            "contract": "Unlock",
            "label": "proxyAdmin",
            "type": "t_contract(ProxyAdmin)949",
            "src": "contracts/Unlock.sol:99"
          },
          {
            "contract": "Unlock",
            "label": "_publicLockVersions",
            "type": "t_mapping(t_address,t_uint16)",
            "src": "contracts/Unlock.sol:102"
          },
          {
            "contract": "Unlock",
            "label": "_publicLockImpls",
            "type": "t_mapping(t_uint16,t_address)",
            "src": "contracts/Unlock.sol:103"
          },
          {
            "contract": "Unlock",
            "label": "publicLockLatestVersion",
            "type": "t_uint16",
            "src": "contracts/Unlock.sol:104"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(LockBalances)1513_storage)": {
            "label": "mapping(address => struct Unlock.LockBalances)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(LockBalances)1513_storage": {
            "label": "struct Unlock.LockBalances",
            "members": [
              {
                "label": "deployed",
                "type": "t_bool"
              },
              {
                "label": "totalSales",
                "type": "t_uint256"
              },
              {
                "label": "yieldedDiscountTokens",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_contract(IUniswapOracle)3350)": {
            "label": "mapping(address => contract IUniswapOracle)"
          },
          "t_contract(IUniswapOracle)3350": {
            "label": "contract IUniswapOracle"
          },
          "t_contract(ProxyAdmin)949": {
            "label": "contract ProxyAdmin"
          },
          "t_mapping(t_address,t_uint16)": {
            "label": "mapping(address => uint16)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint16,t_address)": {
            "label": "mapping(uint16 => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d17576afcd2c7a2e78751dfd43bc021446e458bc34b334e70c3b114a2d92738c": {
      "address": "0x3952787d8Ec653E9179a3Fa5D8c018d7bD8e94c7",
      "txHash": "0xb55cd83470d055953573363f01391e219ac99138e020c389ce62849aaf3ab17f",
      "layout": {
        "storage": [
          {
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "UnlockInitializable",
            "src": "contracts/utils/UnlockInitializable.sol:39"
          },
          {
            "label": "initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "UnlockInitializable",
            "src": "contracts/utils/UnlockInitializable.sol:44"
          },
          {
            "label": "______gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UnlockContextUpgradeable",
            "src": "contracts/utils/UnlockContextUpgradeable.sol:31"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "UnlockOwnable",
            "src": "contracts/utils/UnlockOwnable.sol:23"
          },
          {
            "label": "______gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UnlockOwnable",
            "src": "contracts/utils/UnlockOwnable.sol:86"
          },
          {
            "label": "grossNetworkProduct",
            "offset": 0,
            "slot": "102",
            "type": "t_uint256",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:63"
          },
          {
            "label": "totalDiscountGranted",
            "offset": 0,
            "slot": "103",
            "type": "t_uint256",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:65"
          },
          {
            "label": "locks",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_struct(LockBalances)1513_storage)",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:68"
          },
          {
            "label": "globalBaseTokenURI",
            "offset": 0,
            "slot": "105",
            "type": "t_string_storage",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:72"
          },
          {
            "label": "globalTokenSymbol",
            "offset": 0,
            "slot": "106",
            "type": "t_string_storage",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:76"
          },
          {
            "label": "publicLockAddress",
            "offset": 0,
            "slot": "107",
            "type": "t_address",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:79"
          },
          {
            "label": "uniswapOracles",
            "offset": 0,
            "slot": "108",
            "type": "t_mapping(t_address,t_contract(IUniswapOracle)3504)",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:83"
          },
          {
            "label": "weth",
            "offset": 0,
            "slot": "109",
            "type": "t_address",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:86"
          },
          {
            "label": "udt",
            "offset": 0,
            "slot": "110",
            "type": "t_address",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:89"
          },
          {
            "label": "estimatedGasForPurchase",
            "offset": 0,
            "slot": "111",
            "type": "t_uint256",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:92"
          },
          {
            "label": "chainId",
            "offset": 0,
            "slot": "112",
            "type": "t_uint256",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:95"
          },
          {
            "label": "proxyAdminAddress",
            "offset": 0,
            "slot": "113",
            "type": "t_address",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:98"
          },
          {
            "label": "proxyAdmin",
            "offset": 0,
            "slot": "114",
            "type": "t_contract(ProxyAdmin)949",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:99"
          },
          {
            "label": "_publicLockVersions",
            "offset": 0,
            "slot": "115",
            "type": "t_mapping(t_address,t_uint16)",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:102"
          },
          {
            "label": "_publicLockImpls",
            "offset": 0,
            "slot": "116",
            "type": "t_mapping(t_uint16,t_address)",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:103"
          },
          {
            "label": "publicLockLatestVersion",
            "offset": 0,
            "slot": "117",
            "type": "t_uint16",
            "contract": "Unlock",
            "src": "contracts/Unlock.sol:104"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IUniswapOracle)3504": {
            "label": "contract IUniswapOracle",
            "numberOfBytes": "20"
          },
          "t_contract(ProxyAdmin)949": {
            "label": "contract ProxyAdmin",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_contract(IUniswapOracle)3504)": {
            "label": "mapping(address => contract IUniswapOracle)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(LockBalances)1513_storage)": {
            "label": "mapping(address => struct Unlock.LockBalances)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint16)": {
            "label": "mapping(address => uint16)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint16,t_address)": {
            "label": "mapping(uint16 => address)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(LockBalances)1513_storage": {
            "label": "struct Unlock.LockBalances",
            "members": [
              {
                "label": "deployed",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalSales",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "yieldedDiscountTokens",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      }
    },
    "2c9597ca86f576ca3b0b050dffb605382a92703e98ab1467ba70b9d00202eb29": {
      "address": "0x1D135F35FBaE00F943b893627EE6440658C91Ed9",
      "txHash": "0x7ac2dc0938488f9e7a61c5b45734619d690d274d60b610611d7ad4105257b8ca",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "101",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:32"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "102",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:33"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "103",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:120"
          },
          {
            "label": "locksmiths",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "KeyManager",
            "src": "contracts/KeyManager.sol:19"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "0f687bccb5600119016c5e403896dfbb6108bfaba56b3f786736b64293444ea8": {
      "address": "0xdCB2F7d1Fb126A166e7168E1D84e415b3ffD6B93",
      "txHash": "0xc40b2eac587f93d753a6ff39ed9eaaacf6792f12af03624041b112e2d008f3cb",
      "layout": {
        "solcVersion": "0.8.13",
        "storage": [
          {
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "UnlockInitializable",
            "src": "contracts/past-versions/UnlockV12.sol:2425"
          },
          {
            "label": "initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "UnlockInitializable",
            "src": "contracts/past-versions/UnlockV12.sol:2430"
          },
          {
            "label": "______gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UnlockContextUpgradeable",
            "src": "contracts/past-versions/UnlockV12.sol:2519"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "UnlockOwnable",
            "src": "contracts/past-versions/UnlockV12.sol:2548"
          },
          {
            "label": "______gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UnlockOwnable",
            "src": "contracts/past-versions/UnlockV12.sol:2618"
          },
          {
            "label": "grossNetworkProduct",
            "offset": 0,
            "slot": "102",
            "type": "t_uint256",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2680"
          },
          {
            "label": "totalDiscountGranted",
            "offset": 0,
            "slot": "103",
            "type": "t_uint256",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2682"
          },
          {
            "label": "locks",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_struct(LockBalances)2780_storage)",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2685"
          },
          {
            "label": "globalBaseTokenURI",
            "offset": 0,
            "slot": "105",
            "type": "t_string_storage",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2689"
          },
          {
            "label": "globalTokenSymbol",
            "offset": 0,
            "slot": "106",
            "type": "t_string_storage",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2693"
          },
          {
            "label": "publicLockAddress",
            "offset": 0,
            "slot": "107",
            "type": "t_address",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2696"
          },
          {
            "label": "uniswapOracles",
            "offset": 0,
            "slot": "108",
            "type": "t_mapping(t_address,t_contract(IUniswapOracleV3)1947)",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2700"
          },
          {
            "label": "weth",
            "offset": 0,
            "slot": "109",
            "type": "t_address",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2703"
          },
          {
            "label": "udt",
            "offset": 0,
            "slot": "110",
            "type": "t_address",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2706"
          },
          {
            "label": "estimatedGasForPurchase",
            "offset": 0,
            "slot": "111",
            "type": "t_uint256",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2709"
          },
          {
            "label": "chainId",
            "offset": 0,
            "slot": "112",
            "type": "t_uint256",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2712"
          },
          {
            "label": "proxyAdminAddress",
            "offset": 0,
            "slot": "113",
            "type": "t_address",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2715"
          },
          {
            "label": "proxyAdmin",
            "offset": 0,
            "slot": "114",
            "type": "t_contract(ProxyAdmin)1215",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2716"
          },
          {
            "label": "_publicLockVersions",
            "offset": 0,
            "slot": "115",
            "type": "t_mapping(t_address,t_uint16)",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2719"
          },
          {
            "label": "_publicLockImpls",
            "offset": 0,
            "slot": "116",
            "type": "t_mapping(t_uint16,t_address)",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2720"
          },
          {
            "label": "publicLockLatestVersion",
            "offset": 0,
            "slot": "117",
            "type": "t_uint16",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2721"
          },
          {
            "label": "protocolFee",
            "offset": 0,
            "slot": "118",
            "type": "t_uint256",
            "contract": "Unlock",
            "src": "contracts/past-versions/UnlockV12.sol:2724"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IUniswapOracleV3)1947": {
            "label": "contract IUniswapOracleV3",
            "numberOfBytes": "20"
          },
          "t_contract(ProxyAdmin)1215": {
            "label": "contract ProxyAdmin",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_contract(IUniswapOracleV3)1947)": {
            "label": "mapping(address => contract IUniswapOracleV3)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(LockBalances)2780_storage)": {
            "label": "mapping(address => struct Unlock.LockBalances)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint16)": {
            "label": "mapping(address => uint16)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint16,t_address)": {
            "label": "mapping(uint16 => address)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(LockBalances)2780_storage": {
            "label": "struct Unlock.LockBalances",
            "members": [
              {
                "label": "deployed",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalSales",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "yieldedDiscountTokens",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      }
    },
    "ce94b37ee007ad95d23ba128ffbfc3fe5843fbd2253b6c71c377f9ebf8d6b1b2": {
      "address": "0x7E33dD3955b7B4a699CE75D507bfB2f044D5Df87",
      "txHash": "0x550553560ce03e485c1a29036bf9913f6a95a4f96c3bd98fafcaf05974937984",
      "layout": {
        "solcVersion": "0.8.17",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "101",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "102",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "103",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "104",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "105",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "153",
            "type": "t_array(t_uint256)50_storage",
            "contract": "IGovernorUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol:325"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "203",
            "type": "t_array(t_uint256)50_storage",
            "contract": "IGovernorTimelockUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/IGovernorTimelockUpgradeable.sol:38"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "253",
            "type": "t_string_storage",
            "contract": "GovernorUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:51"
          },
          {
            "label": "_proposals",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_struct(ProposalCore)465_storage)",
            "contract": "GovernorUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:54",
            "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
          },
          {
            "label": "_governanceCall",
            "offset": 0,
            "slot": "255",
            "type": "t_struct(Bytes32Deque)10152_storage",
            "contract": "GovernorUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:60"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "257",
            "type": "t_array(t_uint256)46_storage",
            "contract": "GovernorUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:735"
          },
          {
            "label": "_proposalVotes",
            "offset": 0,
            "slot": "303",
            "type": "t_mapping(t_uint256,t_struct(ProposalVote)3387_storage)",
            "contract": "GovernorCountingSimpleUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "304",
            "type": "t_array(t_uint256)49_storage",
            "contract": "GovernorCountingSimpleUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:112"
          },
          {
            "label": "token",
            "offset": 0,
            "slot": "353",
            "type": "t_contract(IERC5805Upgradeable)4530",
            "contract": "GovernorVotesUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:18"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "354",
            "type": "t_array(t_uint256)50_storage",
            "contract": "GovernorVotesUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:68"
          },
          {
            "label": "_timelock",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(TimelockControllerUpgradeable)3351",
            "contract": "GovernorTimelockControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:28"
          },
          {
            "label": "_timelockIds",
            "offset": 0,
            "slot": "405",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "contract": "GovernorTimelockControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "406",
            "type": "t_array(t_uint256)48_storage",
            "contract": "GovernorTimelockControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:177"
          },
          {
            "label": "_votingDelay",
            "offset": 0,
            "slot": "454",
            "type": "t_uint256",
            "contract": "UnlockProtocolGovernor",
            "src": "contracts/UnlockProtocolGovernor.sol:18"
          },
          {
            "label": "_votingPeriod",
            "offset": 0,
            "slot": "455",
            "type": "t_uint256",
            "contract": "UnlockProtocolGovernor",
            "src": "contracts/UnlockProtocolGovernor.sol:19"
          },
          {
            "label": "_quorum",
            "offset": 0,
            "slot": "456",
            "type": "t_uint256",
            "contract": "UnlockProtocolGovernor",
            "src": "contracts/UnlockProtocolGovernor.sol:20"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes24": {
            "label": "bytes24",
            "numberOfBytes": "24"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes4": {
            "label": "bytes4",
            "numberOfBytes": "4"
          },
          "t_contract(IERC5805Upgradeable)4530": {
            "label": "contract IERC5805Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(TimelockControllerUpgradeable)3351": {
            "label": "contract TimelockControllerUpgradeable",
            "numberOfBytes": "20"
          },
          "t_int128": {
            "label": "int128",
            "numberOfBytes": "16"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_int128,t_bytes32)": {
            "label": "mapping(int128 => bytes32)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProposalCore)465_storage)": {
            "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProposalVote)3387_storage)": {
            "label": "mapping(uint256 => struct GovernorCountingSimpleUpgradeable.ProposalVote)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Bytes32Deque)10152_storage": {
            "label": "struct DoubleEndedQueueUpgradeable.Bytes32Deque",
            "members": [
              {
                "label": "_begin",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_end",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "_data",
                "type": "t_mapping(t_int128,t_bytes32)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProposalCore)465_storage": {
            "label": "struct GovernorUpgradeable.ProposalCore",
            "members": [
              {
                "label": "voteStart",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "proposer",
                "type": "t_address",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "__gap_unused0",
                "type": "t_bytes4",
                "offset": 28,
                "slot": "0"
              },
              {
                "label": "voteEnd",
                "type": "t_uint64",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "__gap_unused1",
                "type": "t_bytes24",
                "offset": 8,
                "slot": "1"
              },
              {
                "label": "executed",
                "type": "t_bool",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "canceled",
                "type": "t_bool",
                "offset": 1,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(ProposalVote)3387_storage": {
            "label": "struct GovernorCountingSimpleUpgradeable.ProposalVote",
            "members": [
              {
                "label": "againstVotes",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "forVotes",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "abstainVotes",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "hasVoted",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
