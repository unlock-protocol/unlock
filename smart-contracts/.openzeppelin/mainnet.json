{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x79918A4389A437906538E0bbf39918BfA4F7690e"
  },
  "proxies": [
    {
      "address": "0x3d5409cce1d45233de1d4ebdee74b8e004abdd13",
      "kind": "transparent"
    },
    {
      "address": "0x90DE74265a416e1393A450752175AED98fe11517",
      "kind": "transparent"
    }
  ],
  "impls": {
    "1c787d15bfcc8f151c3ca1db0d4a919f7d282e76566f669fa0d4f1098b1e8a36": {
      "address": "0x5ACe3dc6d531d71c693A56510cC7491f48b1c4E4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol"
          },
          {
            "contract": "Ownable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol"
          },
          {
            "contract": "Ownable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol"
          },
          {
            "contract": "Unlock",
            "label": "grossNetworkProduct",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "totalDiscountGranted",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "locks",
            "type": "t_mapping(unknown,t_struct(LockBalances)4_storage)",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "globalBaseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "globalTokenSymbol",
            "type": "t_string_storage",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "publicLockAddress",
            "type": "t_address",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "uniswapOracles",
            "type": "t_mapping(t_address,t_contract(IUniswapOracle)7444)",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "weth",
            "type": "t_address",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "udt",
            "type": "t_address",
            "src": "contracts/Unlock.sol"
          },
          {
            "contract": "Unlock",
            "label": "estimatedGasForPurchase",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(LockBalances)4_storage": {
            "label": "LockBalances",
            "members": [
              {
                "label": "deployed",
                "type": "t_bool"
              },
              {
                "label": "totalSales",
                "type": "t_uint256"
              },
              {
                "label": "yieldedDiscountTokens",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(unknown,t_struct(LockBalances)4_storage)": {
            "label": "LockBalances)"
          },
          "t_string": {
            "label": "string"
          },
          "t_mapping(unknown,t_address)": {
            "label": "mapping(key => address)"
          }
        }
      }
    },
    "3b4ab364958e28492a91a277daaf61cb1cff2a34f93b92e94b238e22e3d18fdd": {
      "address": "0x433f12b9713B012D63D6e60ABf16D64B63BE207b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol"
          },
          {
            "contract": "ERC20",
            "label": "_balances",
            "type": "t_mapping(unknown,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol"
          },
          {
            "contract": "ERC20",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol"
          },
          {
            "contract": "ERC20",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol"
          },
          {
            "contract": "ERC20",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol"
          },
          {
            "contract": "MinterRole",
            "label": "_minters",
            "type": "t_struct(Role)4_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol"
          },
          {
            "contract": "MinterRole",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol"
          },
          {
            "contract": "ERC20Mintable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Mintable.sol"
          },
          {
            "contract": "ERC20Detailed",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol"
          },
          {
            "contract": "ERC20Detailed",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol"
          },
          {
            "contract": "ERC20Detailed",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol"
          },
          {
            "contract": "ERC20Detailed",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(unknown,t_uint256)": {
            "label": "mapping(key => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_struct(Role)4_storage": {
            "label": "Role",
            "members": [
              {
                "label": "bearer",
                "type": "t_mapping(unknown,t_bool)"
              }
            ]
          },
          "t_mapping(unknown,t_bool)": {
            "label": "mapping(key => bool)"
          },
          "t_string": {
            "label": "string"
          },
          "t_string_storage": {
            "label": "string_storage"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "0a735f100bcf67f21f25bffb161c6ad9c73bdee9f5831f4ea7b48114b0478c93": {
      "address": "0x5bEf305dDC84A2c7239353eF9CA19a5e9e1E8fDF",
      "txHash": "0x7770a181b75931d15047d31302c7c0d147e84a15dcc483f97141db11e66bc836",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:233"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:238"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:289"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/ERC20Patched.sol:325"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/ERC20Patched.sol:327"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/ERC20Patched.sol:329"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:650"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "_minters",
            "type": "t_struct(Role)7_storage",
            "src": "contracts/ERC20Patched.sol:1656"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1691"
          },
          {
            "contract": "ERC20MintableUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1730"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1695"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1696"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "contracts/ERC20Patched.sol:1697"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1717"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:821"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:822"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:903"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1169_storage)",
            "src": "contracts/ERC20Patched.sol:973"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:976"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/ERC20Patched.sol:1041"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_delegates",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/ERC20Patched.sol:1367"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_checkpoints",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1931_storage)dyn_storage)",
            "src": "contracts/ERC20Patched.sol:1368"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_totalSupplyCheckpoints",
            "type": "t_array(t_struct(Checkpoint)1931_storage)dyn_storage",
            "src": "contracts/ERC20Patched.sol:1369"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/ERC20Patched.sol:1590"
          },
          {
            "contract": "ERC20VotesCompUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1641"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)1931_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
          },
          "t_array(t_struct(Checkpoint)1931_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)1931_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32"
              },
              {
                "label": "votes",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_address,t_struct(Counter)1169_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1169_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(Role)7_storage": {
            "label": "struct Roles.Role",
            "members": [
              {
                "label": "bearer",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          }
        }
      }
    },
    "c1cd311ce43adf0c1fea96e686ac6080a5184b3a0c75b58858174621d66d7dd9": {
      "address": "0x9837f7330870506D6626B91aC027c658D81157B8",
      "txHash": "0xd667f576a10d21b292a0a51775279fea25941ba6f1b49c0b6bd7f3b07925a9f6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/upgrades/contracts/Initializable.sol:61"
          },
          {
            "contract": "Ownable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol:17"
          },
          {
            "contract": "Ownable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol:80"
          },
          {
            "contract": "Unlock",
            "label": "grossNetworkProduct",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:68"
          },
          {
            "contract": "Unlock",
            "label": "totalDiscountGranted",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:70"
          },
          {
            "contract": "Unlock",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(LockBalances)2318_storage)",
            "src": "contracts/Unlock.sol:73"
          },
          {
            "contract": "Unlock",
            "label": "globalBaseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/Unlock.sol:77"
          },
          {
            "contract": "Unlock",
            "label": "globalTokenSymbol",
            "type": "t_string_storage",
            "src": "contracts/Unlock.sol:81"
          },
          {
            "contract": "Unlock",
            "label": "publicLockAddress",
            "type": "t_address",
            "src": "contracts/Unlock.sol:84"
          },
          {
            "contract": "Unlock",
            "label": "uniswapOracles",
            "type": "t_mapping(t_address,t_contract(IUniswapOracle)7444)",
            "src": "contracts/Unlock.sol:88"
          },
          {
            "contract": "Unlock",
            "label": "weth",
            "type": "t_address",
            "src": "contracts/Unlock.sol:91"
          },
          {
            "contract": "Unlock",
            "label": "udt",
            "type": "t_address",
            "src": "contracts/Unlock.sol:94"
          },
          {
            "contract": "Unlock",
            "label": "estimatedGasForPurchase",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:97"
          },
          {
            "contract": "Unlock",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:100"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(LockBalances)2318_storage)": {
            "label": "mapping(address => struct Unlock.LockBalances)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(LockBalances)2318_storage": {
            "label": "struct Unlock.LockBalances",
            "members": [
              {
                "label": "deployed",
                "type": "t_bool"
              },
              {
                "label": "totalSales",
                "type": "t_uint256"
              },
              {
                "label": "yieldedDiscountTokens",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_contract(IUniswapOracle)7444)": {
            "label": "mapping(address => contract IUniswapOracle)"
          },
          "t_contract(IUniswapOracle)7444": {
            "label": "contract IUniswapOracle"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "23e8cc6f0f1ae1a772357f07e46040c6c4334b75897307db27f5c03a50e5d821": {
      "address": "0x9CffbA297d62Be40cB803EB200Cd476D963742cb",
      "txHash": "0x49e1260fa61c5d372d1a3fb14b1d6f3083cbe45b8f87db06e90c893d24ced797",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:233"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:238"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:289"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/ERC20Patched.sol:325"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/ERC20Patched.sol:327"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/ERC20Patched.sol:329"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:650"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "_minters",
            "type": "t_struct(Role)7_storage",
            "src": "contracts/ERC20Patched.sol:1656"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1691"
          },
          {
            "contract": "ERC20MintableUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1730"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1695"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1696"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "contracts/ERC20Patched.sol:1697"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1717"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:821"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:822"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:903"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1169_storage)",
            "src": "contracts/ERC20Patched.sol:973"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:976"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/ERC20Patched.sol:1041"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_delegates",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/ERC20Patched.sol:1367"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_checkpoints",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1931_storage)dyn_storage)",
            "src": "contracts/ERC20Patched.sol:1368"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_totalSupplyCheckpoints",
            "type": "t_array(t_struct(Checkpoint)1931_storage)dyn_storage",
            "src": "contracts/ERC20Patched.sol:1369"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/ERC20Patched.sol:1590"
          },
          {
            "contract": "ERC20VotesCompUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1641"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)1931_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
          },
          "t_array(t_struct(Checkpoint)1931_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)1931_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32"
              },
              {
                "label": "votes",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_address,t_struct(Counter)1169_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1169_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(Role)7_storage": {
            "label": "struct Roles.Role",
            "members": [
              {
                "label": "bearer",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          }
        }
      }
    },
    "7747a56cb5fbae626c485b00b3831ac17f5a3e93b019220e85448f1f8a758bd5": {
      "address": "0x3F27Ff20E4C53d5cd2BBA91eee90A2B71A876833",
      "txHash": "0xde361c276ffb4967d6bd09af38429d0c6c584c4436f82a0be0e595101e27dcc8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:234"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:239"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:290"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/ERC20Patched.sol:326"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/ERC20Patched.sol:328"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/ERC20Patched.sol:330"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:652"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "_minters",
            "type": "t_struct(Role)7_storage",
            "src": "contracts/ERC20Patched.sol:1678"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1713"
          },
          {
            "contract": "ERC20MintableUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1752"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1717"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1718"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "contracts/ERC20Patched.sol:1719"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1739"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:823"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:824"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:912"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1203_storage)",
            "src": "contracts/ERC20Patched.sol:982"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:985"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/ERC20Patched.sol:1055"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_delegates",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/ERC20Patched.sol:1389"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_checkpoints",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)",
            "src": "contracts/ERC20Patched.sol:1390"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_totalSupplyCheckpoints",
            "type": "t_array(t_struct(Checkpoint)2008_storage)dyn_storage",
            "src": "contracts/ERC20Patched.sol:1391"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/ERC20Patched.sol:1612"
          },
          {
            "contract": "ERC20VotesCompUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1663"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
          },
          "t_array(t_struct(Checkpoint)2008_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)2008_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32"
              },
              {
                "label": "votes",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_address,t_struct(Counter)1203_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1203_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(Role)7_storage": {
            "label": "struct Roles.Role",
            "members": [
              {
                "label": "bearer",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          }
        }
      }
    },
    "ff29041c6dd29f59e23b7732f6511869b9ca975fbb90c294a2eabe570ca3968b": {
      "address": "0xb0C7bF7E8cC54670b462c5f668D56c897c1604d6",
      "txHash": "0xd6499873c95461360d721d36b524a2e4805aae90a4019b8fae6bc381de23b4cd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:234"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:239"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:290"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/ERC20Patched.sol:326"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/ERC20Patched.sol:328"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/ERC20Patched.sol:330"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:651"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "_minters",
            "type": "t_struct(Role)7_storage",
            "src": "contracts/ERC20Patched.sol:1677"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1712"
          },
          {
            "contract": "ERC20MintableUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1751"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1716"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1717"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "contracts/ERC20Patched.sol:1718"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1738"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:822"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:823"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:911"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1203_storage)",
            "src": "contracts/ERC20Patched.sol:981"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:984"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/ERC20Patched.sol:1054"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_delegates",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/ERC20Patched.sol:1388"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_checkpoints",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)",
            "src": "contracts/ERC20Patched.sol:1389"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_totalSupplyCheckpoints",
            "type": "t_array(t_struct(Checkpoint)2008_storage)dyn_storage",
            "src": "contracts/ERC20Patched.sol:1390"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/ERC20Patched.sol:1611"
          },
          {
            "contract": "ERC20VotesCompUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1662"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
          },
          "t_array(t_struct(Checkpoint)2008_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)2008_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32"
              },
              {
                "label": "votes",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_address,t_struct(Counter)1203_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1203_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(Role)7_storage": {
            "label": "struct Roles.Role",
            "members": [
              {
                "label": "bearer",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          }
        }
      }
    },
    "66f69b8418586f0677f959128ad5c436bc187e632d138b6544f2fd22fd11a5cc": {
      "address": "0xcB22BD8b943879e83193F479Ec4E3c98B610B507",
      "txHash": "0x61343ef4f8ac8100bade672329910e9c204e63f10073d0b3bd7638172d845912",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:234"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/ERC20Patched.sol:239"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:290"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/ERC20Patched.sol:326"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts/ERC20Patched.sol:328"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts/ERC20Patched.sol:330"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:651"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "_minters",
            "type": "t_struct(Role)7_storage",
            "src": "contracts/ERC20Patched.sol:1677"
          },
          {
            "contract": "MinterRoleUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1712"
          },
          {
            "contract": "ERC20MintableUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1751"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1716"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/ERC20Patched.sol:1717"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "contracts/ERC20Patched.sol:1718"
          },
          {
            "contract": "ERC20DetailedUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1738"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:822"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:823"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:911"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1203_storage)",
            "src": "contracts/ERC20Patched.sol:981"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts/ERC20Patched.sol:984"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/ERC20Patched.sol:1054"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_delegates",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/ERC20Patched.sol:1388"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_checkpoints",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)",
            "src": "contracts/ERC20Patched.sol:1389"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_totalSupplyCheckpoints",
            "type": "t_array(t_struct(Checkpoint)2008_storage)dyn_storage",
            "src": "contracts/ERC20Patched.sol:1390"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/ERC20Patched.sol:1611"
          },
          {
            "contract": "ERC20VotesCompUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ERC20Patched.sol:1662"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)2008_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
          },
          "t_array(t_struct(Checkpoint)2008_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)2008_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32"
              },
              {
                "label": "votes",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_address,t_struct(Counter)1203_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1203_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(Role)7_storage": {
            "label": "struct Roles.Role",
            "members": [
              {
                "label": "bearer",
                "type": "t_mapping(t_address,t_bool)"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          }
        }
      }
    },
    "41cfeb95a8e6bb7cfbe1d457f8fb6b99648590ab4b46e098ceab867e8c509893": {
      "address": "0x646E373EAf8a4AEc31Bf62B7Fd6fB59296d6CdA9",
      "txHash": "0xb616e544788d8babeb565e5bdf2658d10e79bd8d036dca38b2036bd17433fa42",
      "layout": {
        "storage": [
          {
            "contract": "UnlockInitializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/utils/UnlockInitializable.sol:39"
          },
          {
            "contract": "UnlockInitializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "contracts/utils/UnlockInitializable.sol:44"
          },
          {
            "contract": "UnlockContextUpgradeable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/UnlockContextUpgradeable.sol:31"
          },
          {
            "contract": "UnlockOwnable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/utils/UnlockOwnable.sol:23"
          },
          {
            "contract": "UnlockOwnable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/utils/UnlockOwnable.sol:86"
          },
          {
            "contract": "Unlock",
            "label": "grossNetworkProduct",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:63"
          },
          {
            "contract": "Unlock",
            "label": "totalDiscountGranted",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:65"
          },
          {
            "contract": "Unlock",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(LockBalances)1513_storage)",
            "src": "contracts/Unlock.sol:68"
          },
          {
            "contract": "Unlock",
            "label": "globalBaseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/Unlock.sol:72"
          },
          {
            "contract": "Unlock",
            "label": "globalTokenSymbol",
            "type": "t_string_storage",
            "src": "contracts/Unlock.sol:76"
          },
          {
            "contract": "Unlock",
            "label": "publicLockAddress",
            "type": "t_address",
            "src": "contracts/Unlock.sol:79"
          },
          {
            "contract": "Unlock",
            "label": "uniswapOracles",
            "type": "t_mapping(t_address,t_contract(IUniswapOracle)3350)",
            "src": "contracts/Unlock.sol:83"
          },
          {
            "contract": "Unlock",
            "label": "weth",
            "type": "t_address",
            "src": "contracts/Unlock.sol:86"
          },
          {
            "contract": "Unlock",
            "label": "udt",
            "type": "t_address",
            "src": "contracts/Unlock.sol:89"
          },
          {
            "contract": "Unlock",
            "label": "estimatedGasForPurchase",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:92"
          },
          {
            "contract": "Unlock",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/Unlock.sol:95"
          },
          {
            "contract": "Unlock",
            "label": "proxyAdminAddress",
            "type": "t_address",
            "src": "contracts/Unlock.sol:98"
          },
          {
            "contract": "Unlock",
            "label": "proxyAdmin",
            "type": "t_contract(ProxyAdmin)949",
            "src": "contracts/Unlock.sol:99"
          },
          {
            "contract": "Unlock",
            "label": "_publicLockVersions",
            "type": "t_mapping(t_address,t_uint16)",
            "src": "contracts/Unlock.sol:102"
          },
          {
            "contract": "Unlock",
            "label": "_publicLockImpls",
            "type": "t_mapping(t_uint16,t_address)",
            "src": "contracts/Unlock.sol:103"
          },
          {
            "contract": "Unlock",
            "label": "publicLockLatestVersion",
            "type": "t_uint16",
            "src": "contracts/Unlock.sol:104"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(LockBalances)1513_storage)": {
            "label": "mapping(address => struct Unlock.LockBalances)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(LockBalances)1513_storage": {
            "label": "struct Unlock.LockBalances",
            "members": [
              {
                "label": "deployed",
                "type": "t_bool"
              },
              {
                "label": "totalSales",
                "type": "t_uint256"
              },
              {
                "label": "yieldedDiscountTokens",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_contract(IUniswapOracle)3350)": {
            "label": "mapping(address => contract IUniswapOracle)"
          },
          "t_contract(IUniswapOracle)3350": {
            "label": "contract IUniswapOracle"
          },
          "t_contract(ProxyAdmin)949": {
            "label": "contract ProxyAdmin"
          },
          "t_mapping(t_address,t_uint16)": {
            "label": "mapping(address => uint16)"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint16,t_address)": {
            "label": "mapping(uint16 => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
