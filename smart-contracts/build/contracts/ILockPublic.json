{
  "contractName": "ILockPublic",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_approved",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_keyPrice",
          "type": "uint256"
        }
      ],
      "name": "updateKeyPrice",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "outstandingKeys",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_recipient",
          "type": "address"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "purchaseFor",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "expireKeyFor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "keyExpirationTimestampFor",
      "outputs": [
        {
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "keyDataFor",
      "outputs": [
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_recipient",
          "type": "address"
        },
        {
          "name": "_referrer",
          "type": "address"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "purchaseForFrom",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "/* solhint-disable no-empty-blocks */\n\npragma solidity 0.4.24;\n\nimport \"openzeppelin-eth/contracts/ownership/Ownable.sol\";\nimport \"./ERC721.sol\";\nimport \"./ILockCore.sol\";\n\n\n/**\n * @title The Lock interface\n * @author HardlyDifficult (unlock-protocol.com)\n * @dev Lock smart contracts are ERC721 compatible smart contracts.\n *  However, they have some specificities:\n *  - Since each address owns at most one single key, the tokenId is equal to the owner\n *  - Each address owns at most one single key (ERC721 allows for multiple owned NFTs)\n *  - When transfering the key, we actually reset the expiration date on the transfered key to now\n *    and assign its previous expiration date to the new owner. This is important because it prevents\n *    some abuse around referrals.\n */\ncontract ILockPublic is ILockCore, ERC721, Ownable { // solhint-disable-line no-empty-blocks\n}\n",
  "sourcePath": "/Users/overlord/DAPPS/unlock/smart-contracts/contracts/interfaces/ILockPublic.sol",
  "ast": {
    "absolutePath": "/Users/overlord/DAPPS/unlock/smart-contracts/contracts/interfaces/ILockPublic.sol",
    "exportedSymbols": {
      "ILockPublic": [
        1162
      ]
    },
    "id": 1163,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1152,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "39:23:7"
      },
      {
        "absolutePath": "openzeppelin-eth/contracts/ownership/Ownable.sol",
        "file": "openzeppelin-eth/contracts/ownership/Ownable.sol",
        "id": 1153,
        "nodeType": "ImportDirective",
        "scope": 1163,
        "sourceUnit": 1327,
        "src": "64:58:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/overlord/DAPPS/unlock/smart-contracts/contracts/interfaces/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 1154,
        "nodeType": "ImportDirective",
        "scope": 1163,
        "sourceUnit": 1100,
        "src": "123:22:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/overlord/DAPPS/unlock/smart-contracts/contracts/interfaces/ILockCore.sol",
        "file": "./ILockCore.sol",
        "id": 1155,
        "nodeType": "ImportDirective",
        "scope": 1163,
        "sourceUnit": 1151,
        "src": "146:25:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1156,
              "name": "ILockCore",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1150,
              "src": "806:9:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ILockCore_$1150",
                "typeString": "contract ILockCore"
              }
            },
            "id": 1157,
            "nodeType": "InheritanceSpecifier",
            "src": "806:9:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1158,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1099,
              "src": "817:6:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$1099",
                "typeString": "contract ERC721"
              }
            },
            "id": 1159,
            "nodeType": "InheritanceSpecifier",
            "src": "817:6:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1160,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1326,
              "src": "825:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$1326",
                "typeString": "contract Ownable"
              }
            },
            "id": 1161,
            "nodeType": "InheritanceSpecifier",
            "src": "825:7:7"
          }
        ],
        "contractDependencies": [
          1099,
          1150,
          1326,
          1382
        ],
        "contractKind": "contract",
        "documentation": "@title The Lock interface\n@author HardlyDifficult (unlock-protocol.com)\n@dev Lock smart contracts are ERC721 compatible smart contracts.\n However, they have some specificities:\n - Since each address owns at most one single key, the tokenId is equal to the owner\n - Each address owns at most one single key (ERC721 allows for multiple owned NFTs)\n - When transfering the key, we actually reset the expiration date on the transfered key to now\n   and assign its previous expiration date to the new owner. This is important because it prevents\n   some abuse around referrals.",
        "fullyImplemented": false,
        "id": 1162,
        "linearizedBaseContracts": [
          1162,
          1326,
          1382,
          1099,
          1150
        ],
        "name": "ILockPublic",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 1163,
        "src": "782:94:7"
      }
    ],
    "src": "39:838:7"
  },
  "legacyAST": {
    "absolutePath": "/Users/overlord/DAPPS/unlock/smart-contracts/contracts/interfaces/ILockPublic.sol",
    "exportedSymbols": {
      "ILockPublic": [
        1162
      ]
    },
    "id": 1163,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1152,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "39:23:7"
      },
      {
        "absolutePath": "openzeppelin-eth/contracts/ownership/Ownable.sol",
        "file": "openzeppelin-eth/contracts/ownership/Ownable.sol",
        "id": 1153,
        "nodeType": "ImportDirective",
        "scope": 1163,
        "sourceUnit": 1327,
        "src": "64:58:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/overlord/DAPPS/unlock/smart-contracts/contracts/interfaces/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 1154,
        "nodeType": "ImportDirective",
        "scope": 1163,
        "sourceUnit": 1100,
        "src": "123:22:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/overlord/DAPPS/unlock/smart-contracts/contracts/interfaces/ILockCore.sol",
        "file": "./ILockCore.sol",
        "id": 1155,
        "nodeType": "ImportDirective",
        "scope": 1163,
        "sourceUnit": 1151,
        "src": "146:25:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1156,
              "name": "ILockCore",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1150,
              "src": "806:9:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ILockCore_$1150",
                "typeString": "contract ILockCore"
              }
            },
            "id": 1157,
            "nodeType": "InheritanceSpecifier",
            "src": "806:9:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1158,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1099,
              "src": "817:6:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$1099",
                "typeString": "contract ERC721"
              }
            },
            "id": 1159,
            "nodeType": "InheritanceSpecifier",
            "src": "817:6:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1160,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1326,
              "src": "825:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$1326",
                "typeString": "contract Ownable"
              }
            },
            "id": 1161,
            "nodeType": "InheritanceSpecifier",
            "src": "825:7:7"
          }
        ],
        "contractDependencies": [
          1099,
          1150,
          1326,
          1382
        ],
        "contractKind": "contract",
        "documentation": "@title The Lock interface\n@author HardlyDifficult (unlock-protocol.com)\n@dev Lock smart contracts are ERC721 compatible smart contracts.\n However, they have some specificities:\n - Since each address owns at most one single key, the tokenId is equal to the owner\n - Each address owns at most one single key (ERC721 allows for multiple owned NFTs)\n - When transfering the key, we actually reset the expiration date on the transfered key to now\n   and assign its previous expiration date to the new owner. This is important because it prevents\n   some abuse around referrals.",
        "fullyImplemented": false,
        "id": 1162,
        "linearizedBaseContracts": [
          1162,
          1326,
          1382,
          1099,
          1150
        ],
        "name": "ILockPublic",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 1163,
        "src": "782:94:7"
      }
    ],
    "src": "39:838:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-12-14T22:05:17.682Z"
}