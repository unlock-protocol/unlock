
> lock@1.0.0 generate /Users/overlord/DAPPS/unlock/smart-contracts
> ../scripts/generator.js "PublicLock.sol" "Lock-ABI.json"

contract PublicLock.sol{function BASIS_POINTS_DEN() constant returns (uint256 );
function address2Str(address _addr) constant returns (string );
function approve(address _approved,uint256 _tokenId) ;
function balanceOf(address _owner) constant returns (uint256 );
function beneficiary() constant returns (address );
function cancelAndRefund() ;
function cancelAndRefundFor(address _keyOwner,bytes _signature) ;
function destroyLock() ;
function disableLock() ;
function erc1820() constant returns (address );
function expirationDuration() constant returns (uint256 );
function expireKeyFor(address _owner) ;
function freeTrialLength() constant returns (uint256 );
function fullRefund(address _keyOwner,uint256 amount) ;
function getApproved(uint256 _tokenId) constant returns (address );
function getBalance(address _tokenAddress,address _account) constant returns (uint256 );
function getCancelAndRefundApprovalHash(address _keyOwner,address _txSender) constant returns (bytes32 approvalHash);
function getCancelAndRefundValueFor(address _owner) constant returns (uint256 refund);
function getHasValidKey(address _owner) constant returns (bool );
function getOwnersByPage(uint256 _page,uint256 _pageSize) constant returns (address[] );
function getTokenIdFor(address _account) constant returns (uint256 );
function getTransferFee(address _owner) constant returns (uint256 );
function grantKeys(address[] _recipients,uint256[] _expirationTimestamps) ;
function invalidateApprovalToCancelKey() ;
function isAlive() constant returns (bool );
function isApprovedForAll(address _owner,address _operator) constant returns (bool );
function isKeyOwner(uint256 _tokenId,address _owner) constant returns (bool );
function isOwner() constant returns (bool );
function keyCancelInterfaceId() constant returns (bytes32 );
function keyExpirationTimestampFor(address _owner) constant returns (uint256 timestamp);
function keyOwnerToNonce(address ) constant returns (uint256 );
function keyPrice() constant returns (uint256 );
function keySoldInterfaceId() constant returns (bytes32 );
function maxNumberOfKeys() constant returns (uint256 );
function name() constant returns (string );
function numberOfOwners() constant returns (uint256 );
function owner() constant returns (address );
function ownerOf(uint256 ) constant returns (address );
function owners(uint256 ) constant returns (address );
function purchase(uint256 _value,address _recipient,address _referrer,bytes _data) ;
function refundPenaltyBasisPoints() constant returns (uint256 );
function renounceOwnership() ;
function safeTransferFrom(address _from,address _to,uint256 _tokenId) ;
function safeTransferFrom(address _from,address _to,uint256 _tokenId,bytes _data) ;
function setApprovalForAll(address _to,bool _approved) ;
function setBaseTokenURI(string _baseTokenURI) ;
function strConcat(string _a,string _b,string _c,string _d) constant returns (string _concatenatedString);
function supportsInterface(bytes4 interfaceId) constant returns (bool );
function symbol() constant returns (string );
function tokenAddress() constant returns (address );
function tokenByIndex(uint256 _index) constant returns (uint256 );
function tokenOfOwnerByIndex(address _owner,uint256 _index) constant returns (uint256 );
function tokenURI(uint256 _tokenId) constant returns (string );
function totalSupply() constant returns (uint256 );
function transferFeeBasisPoints() constant returns (uint256 );
function transferFrom(address _from,address _recipient,uint256 _tokenId) ;
function transferOwnership(address newOwner) ;
function uint2Str(uint256 _i) constant returns (string _uintAsString);
function unlockProtocol() constant returns (address );
function updateBeneficiary(address _beneficiary) ;
function updateKeyPrice(uint256 _keyPrice) ;
function updateLockName(string _lockName) ;
function updateLockSymbol(string _lockSymbol) ;
function updateRefundPenalty(uint256 _freeTrialLength,uint256 _refundPenaltyBasisPoints) ;
function updateTransferFee(uint256 _transferFeeBasisPoints) ;
function withdraw(address _tokenAddress,uint256 _amount) ;
function initialize(address _owner,uint256 _expirationDuration,address _tokenAddress,uint256 _keyPrice,uint256 _maxNumberOfKeys,string _lockName) ;
function initialize() ;
function initialize(address _tokenAddress) ;
function publicLockVersion() constant returns (uint16 );
}
