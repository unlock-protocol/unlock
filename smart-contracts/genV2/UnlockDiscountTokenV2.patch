--- contracts/UnlockDiscountTokenV2.ref	2021-06-04 18:41:45.209035257 +0200
+++ contracts/UnlockDiscountTokenV2.generated.sol	2021-06-04 18:44:24.595855786 +0200
@@ -2,7 +2,7 @@

 // File @openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol@v2.5.0

-pragma solidity ^0.5.0;
+pragma solidity ^0.8.0;

 /**
  * @title Roles
@@ -171,29 +171,29 @@
     /**
      * @dev Indicates that the contract has been initialized.
      */
-    bool private _initialized;
+    bool private initialized;

     /**
      * @dev Indicates that the contract is in the process of being initialized.
      */
-    bool private _initializing;
+    bool private initializing;

     /**
      * @dev Modifier to protect an initializer function from being invoked twice.
      */
     modifier initializer() {
-        require(_initializing || !_initialized, "Initializable: contract is already initialized");
+        require(initializing || !initialized, "Initializable: contract is already initialized");

-        bool isTopLevelCall = !_initializing;
+        bool isTopLevelCall = !initializing;
         if (isTopLevelCall) {
-            _initializing = true;
-            _initialized = true;
+            initializing = true;
+            initialized = true;
         }

         _;

         if (isTopLevelCall) {
-            _initializing = false;
+            initializing = false;
         }
     }
 }
@@ -229,7 +229,7 @@
         this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
         return msg.data;
     }
-    uint256[50] private __gap;
+    uint256[50] private ______gap;
 }


@@ -265,22 +265,22 @@
  * functions have been added to mitigate the well-known issues around setting
  * allowances. See {IERC20-approve}.
  */
-contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {
+abstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {
     mapping (address => uint256) private _balances;

     mapping (address => mapping (address => uint256)) private _allowances;

     uint256 private _totalSupply;

-    string private _name;
-    string private _symbol;
+    // string private _name;
+    // string private _symbol;

     /**
      * @dev Sets the values for {name} and {symbol}.
      *
      * The defaut value of {decimals} is 18. To select a different value for
      * {decimals} you should overload it.
-     *
+     *ERC20Upgradeable
      * All two of these values are immutable: they can only be set once during
      * construction.
      */
@@ -290,24 +290,24 @@
     }

     function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {
-        _name = name_;
-        _symbol = symbol_;
+        // _name = name_;
+        // _symbol = symbol_;
     }

     /**
      * @dev Returns the name of the token.
      */
-    function name() public view virtual override returns (string memory) {
-        return _name;
-    }
+    // function name() public view virtual override returns (string memory) {
+    //     return _name;
+    // }

     /**
      * @dev Returns the symbol of the token, usually a shorter version of the
      * name.
      */
-    function symbol() public view virtual override returns (string memory) {
-        return _symbol;
-    }
+    // function symbol() public view virtual override returns (string memory) {
+    //     return _symbol;
+    // }

     /**
      * @dev Returns the number of decimals used to get its user representation.
@@ -541,7 +541,7 @@
      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
      */
     function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
-    uint256[45] private __gap;
+    uint256[50] private ______gap;
 }
