--- contracts/ERC20Patched.generated.sol	2021-08-20 13:23:27.000000000 +0200
+++ contracts/ERC20Patched.sol	2021-08-20 13:28:21.000000000 +0200
@@ -1,9 +1,8 @@
 // Sources flattened with hardhat v2.5.0 https://hardhat.org
+pragma solidity ^0.8.0;
 
 // File @openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol@v2.5.0
 
-pragma solidity ^0.5.0;
-
 /**
  * @title Roles
  * @dev Library for managing addresses assigned to a Role.
@@ -43,7 +42,6 @@
 // File @openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol@v4.3.0
 
 
-pragma solidity ^0.8.0;
 
 /**
  * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
@@ -105,7 +103,6 @@
 // File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v4.3.0
 
 
-pragma solidity ^0.8.0;
 
 /**
  * @dev Interface of the ERC20 standard as defined in the EIP.
@@ -189,7 +186,6 @@
 // File @openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol@v4.3.0
 
 
-pragma solidity ^0.8.0;
 
 /**
  * @dev Interface for the optional metadata functions from the ERC20 standard.
@@ -217,7 +213,6 @@
 // File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.3.0
 
 
-pragma solidity ^0.8.0;
 
 /**
  * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
@@ -235,29 +230,29 @@
     /**
      * @dev Indicates that the contract has been initialized.
      */
-    bool private _initialized;
+    bool private initialized;
 
     /**
      * @dev Indicates that the contract is in the process of being initialized.
      */
-    bool private _initializing;
+    bool private initializing;
 
     /**
      * @dev Modifier to protect an initializer function from being invoked twice.
      */
     modifier initializer() {
-        require(_initializing || !_initialized, "Initializable: contract is already initialized");
+        require(initializing || !initialized, "Initializable: contract is already initialized");
 
-        bool isTopLevelCall = !_initializing;
+        bool isTopLevelCall = !initializing;
         if (isTopLevelCall) {
-            _initializing = true;
-            _initialized = true;
+            initializing = true;
+            initialized = true;
         }
 
         _;
 
         if (isTopLevelCall) {
-            _initializing = false;
+            initializing = false;
         }
     }
 }
@@ -266,7 +261,6 @@
 // File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.3.0
 
 
-pragma solidity ^0.8.0;
 
 /**
  * @dev Provides information about the current execution context, including the
@@ -292,18 +286,13 @@
     function _msgData() internal view virtual returns (bytes calldata) {
         return msg.data;
     }
-    uint256[50] private __gap;
+    uint256[50] private ______gap;
 }
 
 
 // File @openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol@v4.3.0
 
 
-pragma solidity ^0.8.0;
-
-
-
-
 /**
  * @dev Implementation of the {IERC20} interface.
  *
@@ -329,15 +318,15 @@
  * functions have been added to mitigate the well-known issues around setting
  * allowances. See {IERC20-approve}.
  */
-contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {
+abstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {
     mapping(address => uint256) private _balances;
 
     mapping(address => mapping(address => uint256)) private _allowances;
 
     uint256 private _totalSupply;
 
-    string private _name;
-    string private _symbol;
+    // string private _name;
+    // string private _symbol;
 
     /**
      * @dev Sets the values for {name} and {symbol}.
@@ -354,24 +343,24 @@
     }
 
     function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {
-        _name = name_;
-        _symbol = symbol_;
+        // _name = name_;
+        // _symbol = symbol_;
     }
 
     /**
      * @dev Returns the name of the token.
      */
-    function name() public view virtual override returns (string memory) {
-        return _name;
-    }
+    // function name() public view virtual override returns (string memory) {
+    //     return _name;
+    // }
 
     /**
      * @dev Returns the symbol of the token, usually a shorter version of the
      * name.
      */
-    function symbol() public view virtual override returns (string memory) {
-        return _symbol;
-    }
+    // function symbol() public view virtual override returns (string memory) {
+    //     return _symbol;
+    // }
 
     /**
      * @dev Returns the number of decimals used to get its user representation.
@@ -655,15 +644,12 @@
         address to,
         uint256 amount
     ) internal virtual {}
-    uint256[45] private __gap;
+    uint256[50] private ______gap;
 }
 
 
 // File @openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol@v4.3.0
 
-
-pragma solidity ^0.8.0;
-
 /**
  * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
  *
@@ -884,7 +870,6 @@
 // File @openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol@v4.3.0
 
 
-pragma solidity ^0.8.0;
 
 
 /**
@@ -997,7 +982,6 @@
 // File @openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol@v4.3.0
 
 
-pragma solidity ^0.8.0;
 
 /**
  * @title Counters
@@ -1042,7 +1026,6 @@
 // File @openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol@v4.3.0
 
 
-pragma solidity ^0.8.0;
 
 
 
@@ -1137,7 +1120,6 @@
 // File @openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol@v4.3.0
 
 
-pragma solidity ^0.8.0;
 
 /**
  * @dev Standard math utilities missing in the Solidity language.
@@ -1182,7 +1164,6 @@
 // File @openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol@v4.3.0
 
 
-pragma solidity ^0.8.0;
 
 /**
  * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
@@ -1425,7 +1406,6 @@
 // File @openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol@v4.3.0
 
 
-pragma solidity ^0.8.0;
 
 
 
@@ -1688,10 +1668,9 @@
 
 // File scripts/udt-flatten/ERC20Patched.template.sol
 
-pragma solidity ^0.8.0;
 
 
-contract MinterRoleUpgradeable is Initializable, ContextUpgradeable {
+abstract contract MinterRoleUpgradeable is Initializable, ContextUpgradeable {
     using Roles for Roles.Role;
 
     event MinterAdded(address indexed account);
@@ -1735,7 +1714,7 @@
     uint256[50] private ______gap;
 }
 
-abstract contract ERC20DetailedUpgradeable is Initializable, ERC20VotesUpgradeable {
+abstract contract ERC20DetailedUpgradeable is Initializable, IERC20Upgradeable {
     string private _name;
     string private _symbol;
     uint8 private _decimals;
@@ -1761,7 +1740,7 @@
     uint256[50] private ______gap;
 }
 
-abstract contract ERC20MintableUpgradeable is Initializable, ERC20VotesUpgradeable, MinterRoleUpgradeable {
+abstract contract ERC20MintableUpgradeable is Initializable, ERC20Upgradeable, MinterRoleUpgradeable {
     function initialize(address sender) public virtual override initializer {
         MinterRoleUpgradeable.initialize(sender);
     }
