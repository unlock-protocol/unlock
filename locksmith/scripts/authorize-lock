#!/usr/bin/env node

/**
 * Authorize lock: separate from approving the withdrawl of ERC20
 * tokens, this script stores whether Unlock has approved a given
 * lock.
 */
const yargs = require('yargs')
const { AuthorizedLock } = require('../build/src/models/index')
const Normalizer = require('../build/src/utils/normalizer')

const args = yargs
  .usage('Usage: $0 <command> [options]')
  .command(
    'new [lockAddress]',
    'Authorize a new lock',
    (yargs) => {
      return yargs
        .option('lockAddress', {
          demand: true,
          type: 'string',
        })
        .option('chain', {
          demand: true,
          type: 'number',
        })
        .string('_')
    },
    async ({ lockAddress, chain }) => {
      const normalizedAddress = Normalizer.ethereumAddress(lockAddress)
      await authorizeLock(normalizedAddress, chain)
    }
  )
  .command(
    'list',
    'List all authorized lock addresses',
    (yargs) => {},
    async () => {
      await printLocks()
    }
  )
  .demandCommand(1, 'You need to specify a command')
  .help().argv

async function authorizeLock(lockAddress, chain) {
  try {
    await AuthorizedLock.create({
      chain,
      address: lockAddress,
      authorizedAt: new Date(),
    })
  } catch (err) {
    if (err.name === 'SequelizeUniqueConstraintError') {
      console.error(
        `ERROR\tCould not create entry for ${lockAddress}: it already exists.`
      )
    } else {
      console.error(err)
    }
  }
}

async function printLocks() {
  try {
    const locks = await AuthorizedLock.findAll({
      attributes: ['address', 'authorizedAt'],
    })
    console.table(locks.map((lock) => lock.dataValues))
  } catch (e) {
    console.log('Could not print locks.')
  }
}
async function main() {}

main()
