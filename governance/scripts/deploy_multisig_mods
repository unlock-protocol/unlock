#!/usr/bin/env node
/**
 *
 * A small util to show the command that needs to be run to
 * deploy SAFE modules used by cross-chain governance.
 *
 * Usage: scripts/deploy_multisig_mods
 *
 * ## How to deploy Zodiac modules
 *
 * 1. get the modules code
 * git clone git@github.com:gnosisguild/zodiac-modifier-delay.git
 * git clone git@github.com:gnosisguild/zodiac-module-connext.git
 *
 * 2. prepare repo
 * yarn
 * yarn build
 *
 * 3. add required network in `hardhat.config.ts` with the following pattern
 * `
 * base: {
 *     url: "https://rpc.unlock-protocol.com/8453",
 *     accounts: [process.env.DEPLOYER_PRIVATE_KEY],
 *   },
 * `
 * and block explorer api key
 *
 * `
 * etherscan: {
 *    apiKey: {
 *      base: '<your-api-key>',
 *    }
 * },
 * `
 *
 * 4. export DEPLOYER_PRIVATE_KEY to env
 * 5. run this script to get the commands
 *
 * NB: the first run will give you instructions for delay module. The second
 * one for Connext module.
 *
 */

const allNetworks = require('@unlock-protocol/networks')

const owner = '0x246A13358Fb27523642D86367a51C2aEB137Ac6C'
const daoTimelockAddress = '0x17EEDFb0a6E6e06E95B3A1F928dc4024240BC76B'
const daoChainId = 1
const daoDomainId = allNetworks.networks[daoChainId].governanceBridge.domainId

// in seconds
const ONE_DAY = 24 * 3600

// if any network is present this array, only these will be executed
const networks = ['polygon', 'gnosis', 'bsc', 'arbitrum', 'optimism', 'base']
console.log(`Running task for the following networks: ${networks.toString()}`)

for (let i = 0; i < networks.length; i++) {
  const { multisig, governanceBridge } = allNetworks[networks[i]]
  console.log('\n', networks[i], '\n')
  if (!governanceBridge.modules || !governanceBridge.modules.delayMod) {
    const args = [
      '--network',
      networks[i],
      `--owner`,
      owner,
      '--avatar',
      multisig,
      '--target',
      multisig,
      '--cooldown',
      ONE_DAY * 2, // 2 days
      '--expiration',
      ONE_DAY * 90, // 90 days expiration
    ]

    console.log(`# Zodiac Delay Mod`)
    console.log(`yarn hardhat deploy ${args.join(' ')}`)
  } else {
    if (governanceBridge.modules) {
      console.log(`Delay mod at ${governanceBridge.modules.delayMod}`)

      if (!governanceBridge.modules.connextMod) {
        const argsConnext = [
          '--network',
          networks[i],
          '--avatar',
          multisig,
          '--connext',
          governanceBridge.connext,
          '--origin',
          daoDomainId,
          '--sender',
          daoTimelockAddress,
          '--owner',
          owner,
          '--target',
          governanceBridge.modules.delayMod,
        ]

        console.log(`# Zodiac Connext Module`)
        console.log(`yarn hardhat setup ${argsConnext.join(' ')}`)

        console.log(
          `yarn hardhat verifyModule ${argsConnext.join(' ')} --module`
        )
      } else {
        console.log(`Connext mod at ${governanceBridge.modules.connextMod}`)
      }
    }
  }
}
