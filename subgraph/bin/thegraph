#!/usr/bin/env node

/**
 * Interact with the graph
 *
 * Usage: node bin/thegraph --help
 */
const { hideBin } = require('yargs/helpers')
const networks = require('@unlock-protocol/networks')
const util = require('util')
const exec = util.promisify(require('child_process').exec)
const { networkName } = require('./networks')

const executeCommand = async (command) => {
  try {
    const { stdout, stderr } = await exec(command)
    if (stderr) {
      console.log(`stderr: ${stderr}`)
    }
    console.log('stdout:', stdout)
  } catch (e) {
    // should contain code (exit code) and signal (that caused the termination).
    console.error(`exec error: ${e}`)
  }
}

const executeComanndErrorReturn = async (command) => {
  try {
    const { stdout, stderr } = await exec(command)
    if (stderr) {
      return stderr;
    }
    console.log('stdout:', stdout)
  } catch (e) {
    // should contain code (exit code) and signal (that caused the termination).
    console.error(`exec error: ${e}`)
  }
}

const executeStudioDeployWithVersionIncrement = async (subgraphName, version) => {
  let [major, minor, patch] = version
    .split('.')
  const cmd = `yarn deploy-studio ${subgraphName} -l=${major}.${minor}.${parseInt(patch)}`
  let stderr = await executeComanndErrorReturn(cmd)
  if (stderr) {
    if (stderr.includes("Version label already exists")) {
      console.log(`Studio version for ${subgraphName} exists - attempting deploy with version - ${major}.${minor}.${parseInt(patch) + 1}`)
      return executeStudioDeployWithVersionIncrement(subgraphName, `${major}.${minor}.${parseInt(patch) + 1}`)
    }
  }
}

const checkHostedServiceAccessToken = () => {
  if (!process.env.SUBGRAPH_DEPLOY_KEY) {
    throw new Error(
      `
      Missing access token in SUBGRAPH_DEPLOY_KEY env.
      You can get a token from https://thegraph.com/hosted-service/dashboard?account=unlock-protocol
      `
    )
  }
}

const checkStudioAccessToken = () => {
  if (!process.env.SUBGRAPH_STUDIO_DEPLOY_KEY) {
    throw new Error(
      `
      Missing access token in SUBGRAPH_STUDIO_DEPLOY_KEY env.
      You can get a token from https://thegraph.com/studio/
      `
    )
  }
}

const codegen = async () => {
  console.log('codegen...')
  await executeCommand('yarn codegen')
}

// Creating subgraphs is only available from hosted-service dashboard
// yarn graph create $network_name-v2 --node https://api.thegraph.com/deploy/ --access-token $SUBGRAPH_DEPLOY_KEY"
const build = async (network) => {
  await executeCommand(`yarn run prepare`)
  console.log(`Building subgraph for ${network} (${networkName(network)})`)
  await executeCommand(`yarn generate-manifest ${networkName(network)}.json`)
}

/**
 * Deploys subgraph with hosted service
 * @param graphLabel
 * @param subgraphName
 * @param graphNode
 * @param ipfs
 * @returns
 */
const deployHosted = async (subgraphName) => {
  checkHostedServiceAccessToken()
  const cmd = `graph auth --product=hosted-service ${process.env.SUBGRAPH_DEPLOY_KEY} && yarn deploy-hosted ${subgraphName} --access-token ${process.env.SUBGRAPH_DEPLOY_KEY}`
  return executeCommand(cmd)
}

/**
 * Deploys subgraph with studio
 * @param version
 * @param subgraphName
 * @returns
 */
const deployStudio = async (version, subgraphName) => {
  checkStudioAccessToken()
  await executeCommand(
    `graph auth --studio ${process.env.SUBGRAPH_STUDIO_DEPLOY_KEY}`
  )
  const cmd = `yarn deploy-studio ${subgraphName} -l=${version}`
  return executeStudioDeployWithVersionIncrement(subgraphName, version)
}

/**
 * deploy command
 * @param network 
 * @param studioName 
 * @param graphLabel 
 * @returns 
 */
const deploy = async (network, studioName, graphLabel) => {
  if (!network) {
    throw new Error('Missing network name')
  }

  if (!networks[network]?.subgraph?.endpointV2) {
    throw new Error(`Missing subgraph configuration for ${network}`)
  }

  const matchHosted = networks[network].subgraph.endpointV2.match(
    'https://api.thegraph.com/subgraphs/name/(.*)'
  )

  const studioEndpoint = networks[network].subgraph.studioEndpoint;

  if (studioName && graphLabel) {
    return deployStudio(graphLabel, studioName)
  }

  if (studioEndpoint && graphLabel) {
    return deployStudio(graphLabel, studioEndpoint)
  }

  if (studioEndpoint) {
    return deployStudio('v0.0.1', studioEndpoint)
  }

  if (matchHosted) {
    return deployHosted(matchHosted[1])
  }

  throw new Error(
    `Invalid subgraph configuration for ${network} (${networks[network].subgraph.endpointV2}) (${networks[network].subgraph.studioEndpoint})`
  )
}

/**
 * deploy only studio command
 * @param network 
 * @param graphLabel 
 * @returns 
 */
const deployOnlyStudio = async (network, graphLabel) => {
  if (!network) {
    throw new Error('Missing network name')
  }

  if (!networks[network]?.subgraph?.studioEndpoint) {
    console.log(`Missing subgraph studioEndpoint for ${network}`)
    return;
  }

  const studioEndpoint = networks[network].subgraph.studioEndpoint;

  if (studioEndpoint && graphLabel) {
    return deployStudio(graphLabel, studioEndpoint)
  }

  throw new Error(
    `Invalid subgraph configuration for ${network} (${networks[network].subgraph.studioEndpoint})`
  )
}
// Note: the palm network is not supported by
//
const choices = Object.keys(networks).filter(
  (d) => !['networks', 'default', 'palm', 'localhost'].includes(d)
)

require('yargs/yargs')(hideBin(process.argv))
  .command(
    'codegen',
    'Deploy subgraph on all networks',
    {},
    async () => await codegen()
  )
  .command(
    'build <network>',
    'build with thegraph hosted service',
    (yargs) =>
      yargs.positional('network', {
        describe: 'the network to deploy',
        choices,
      }),
    async ({ network }) => {
      await build(network)
    }
  )
  .command(
    'deploy <network>',
    'deploy subgraph to thegraph hosted service',
    (yargs) =>
      yargs.positional('network', {
        describe: 'the network to deploy',
        choices,
      }),
    async ({ network, studioName, label }) => {
      await build(network)
      await deploy(network, studioName, label)
    }
  )
  .command(
    'deploy-all',
    'Deploy subgraph on all networks',
    {},
    async ({ label }) => {
      // check config
      console.log(
        `Deploying subgraphs for:\n${choices.map((c) => ` - ${c}\n`).join('')}`
      )

      // build and deploy each network
      for (const network of choices) {
        await build(network)
        await deploy(network, label)
      }

      console.log('Subgraph deployments done.')
    }
  )
  .command(
    'deploy-all-studio',
    'Deploy subgraphs to studio on all decentralized networks',
    {},
    async ({ label }) => {
      let studioChoices = choices.filter((c) => networks[c].subgraph.studioEndpoint != null);
      // check config
      console.log(
        `Deploying subgraphs to studio for:\n${studioChoices.map((c) => ` - ${c}\n`).join('')}`
      )
      // build and deploy each network
      for (const network of studioChoices) {
        await build(network)
        await deployOnlyStudio(network, label)
      }

      console.log('Subgraph studio deployments done.')
    }
  )
  .demandCommand()
  .options({
    label: {
      type: 'string',
      description: 'The version label to use for deployment',
    },
  })
  .options({
    studioName: {
      type: 'string',
      description: 'The name of the studio deployment',
    },
  })
  .parse()
